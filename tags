!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	1.1	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/hnsorens/VoxelEngine/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.2.0	/v6.2.0/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:0.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:1.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:10.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:11.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:12.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:13.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:14.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:15.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:16.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:2.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:3.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:4.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:5.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:6.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:7.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:8.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:9.arguments
0	compile_commands.json	/^  {$/;"	o
1	compile_commands.json	/^      "-c",$/;"	s	array:0.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:1.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:10.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:11.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:12.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:13.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:14.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:15.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:16.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:2.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:3.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:4.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:5.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:6.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:7.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:8.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:9.arguments
1	compile_commands.json	/^  {$/;"	o
10	compile_commands.json	/^  {$/;"	o
11	compile_commands.json	/^  {$/;"	o
12	compile_commands.json	/^  {$/;"	o
13	compile_commands.json	/^  {$/;"	o
14	compile_commands.json	/^  {$/;"	o
15	compile_commands.json	/^  {$/;"	o
16	compile_commands.json	/^  {$/;"	o
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:0.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:1.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:10.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:11.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:12.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:13.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:14.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:15.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:16.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:2.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:3.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:4.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:5.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:6.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:7.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:8.arguments
2	compile_commands.json	/^      "-std=c++23",$/;"	s	array:9.arguments
2	compile_commands.json	/^  {$/;"	o
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:0.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:1.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:10.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:11.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:12.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:13.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:14.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:15.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:16.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:2.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:3.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:4.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:5.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:6.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:7.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:8.arguments
3	compile_commands.json	/^      "-DGLFW_INCLUDE_VULKAN",$/;"	s	array:9.arguments
3	compile_commands.json	/^  {$/;"	o
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:0.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:1.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:10.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:11.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:12.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:13.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:14.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:15.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:16.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:2.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:3.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:4.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:5.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:6.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:7.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:8.arguments
4	compile_commands.json	/^      "-Iinclude",$/;"	s	array:9.arguments
4	compile_commands.json	/^  {$/;"	o
5	compile_commands.json	/^      "-o",$/;"	s	array:0.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:1.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:10.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:11.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:12.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:13.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:14.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:15.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:16.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:2.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:3.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:4.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:5.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:6.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:7.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:8.arguments
5	compile_commands.json	/^      "-o",$/;"	s	array:9.arguments
5	compile_commands.json	/^  {$/;"	o
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:0.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:1.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:10.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:11.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:12.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:13.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:14.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:15.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:16.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:2.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:3.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:4.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:5.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:6.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:7.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:8.arguments
6	compile_commands.json	/^      "bin\/voxels",$/;"	s	array:9.arguments
6	compile_commands.json	/^  {$/;"	o
7	compile_commands.json	/^      "src\/Camera.cpp"$/;"	s	array:0.arguments
7	compile_commands.json	/^      "src\/CommandManager.cpp"$/;"	s	array:1.arguments
7	compile_commands.json	/^      "src\/Engine.cpp"$/;"	s	array:2.arguments
7	compile_commands.json	/^      "src\/PipelineManager.cpp"$/;"	s	array:4.arguments
7	compile_commands.json	/^      "src\/Raytracer.cpp"$/;"	s	array:5.arguments
7	compile_commands.json	/^      "src\/SyncManager.cpp"$/;"	s	array:6.arguments
7	compile_commands.json	/^      "src\/VkZero\/binding.cpp"$/;"	s	array:8.arguments
7	compile_commands.json	/^      "src\/VkZero\/core.cpp"$/;"	s	array:9.arguments
7	compile_commands.json	/^      "src\/VkZero\/descriptor_pool.cpp"$/;"	s	array:10.arguments
7	compile_commands.json	/^      "src\/VkZero\/image.cpp"$/;"	s	array:11.arguments
7	compile_commands.json	/^      "src\/VkZero\/render_pass.cpp"$/;"	s	array:12.arguments
7	compile_commands.json	/^      "src\/VkZero\/resource_manager.cpp"$/;"	s	array:13.arguments
7	compile_commands.json	/^      "src\/VkZero\/shader.cpp"$/;"	s	array:15.arguments
7	compile_commands.json	/^      "src\/VkZero\/shader_builder.cpp"$/;"	s	array:14.arguments
7	compile_commands.json	/^      "src\/VkZero\/window.cpp"$/;"	s	array:16.arguments
7	compile_commands.json	/^      "src\/VoxelWorld.cpp"$/;"	s	array:7.arguments
7	compile_commands.json	/^      "src\/main.cpp"$/;"	s	array:3.arguments
7	compile_commands.json	/^  {$/;"	o
8	compile_commands.json	/^  {$/;"	o
9	compile_commands.json	/^  {$/;"	o
A1B5G5R5UnormPack16	include/VkZero/types.hpp	/^        A1B5G5R5UnormPack16 = 1000470000,$/;"	e	enum:VkZero::Format
A1R5G5B5UnormPack16	include/VkZero/types.hpp	/^        A1R5G5B5UnormPack16 = 8,$/;"	e	enum:VkZero::Format
A2B10G10R10SintPack32	include/VkZero/types.hpp	/^        A2B10G10R10SintPack32 = 69,$/;"	e	enum:VkZero::Format
A2B10G10R10SnormPack32	include/VkZero/types.hpp	/^        A2B10G10R10SnormPack32 = 65,$/;"	e	enum:VkZero::Format
A2B10G10R10SscaledPack32	include/VkZero/types.hpp	/^        A2B10G10R10SscaledPack32 = 67,$/;"	e	enum:VkZero::Format
A2B10G10R10UintPack32	include/VkZero/types.hpp	/^        A2B10G10R10UintPack32 = 68,$/;"	e	enum:VkZero::Format
A2B10G10R10UnormPack32	include/VkZero/types.hpp	/^        A2B10G10R10UnormPack32 = 64,$/;"	e	enum:VkZero::Format
A2B10G10R10UscaledPack32	include/VkZero/types.hpp	/^        A2B10G10R10UscaledPack32 = 66,$/;"	e	enum:VkZero::Format
A2R10G10B10SintPack32	include/VkZero/types.hpp	/^        A2R10G10B10SintPack32 = 63,$/;"	e	enum:VkZero::Format
A2R10G10B10SnormPack32	include/VkZero/types.hpp	/^        A2R10G10B10SnormPack32 = 59,$/;"	e	enum:VkZero::Format
A2R10G10B10SscaledPack32	include/VkZero/types.hpp	/^        A2R10G10B10SscaledPack32 = 61,$/;"	e	enum:VkZero::Format
A2R10G10B10UintPack32	include/VkZero/types.hpp	/^        A2R10G10B10UintPack32 = 62,$/;"	e	enum:VkZero::Format
A2R10G10B10UnormPack32	include/VkZero/types.hpp	/^        A2R10G10B10UnormPack32 = 58,$/;"	e	enum:VkZero::Format
A2R10G10B10UscaledPack32	include/VkZero/types.hpp	/^        A2R10G10B10UscaledPack32 = 60,$/;"	e	enum:VkZero::Format
A4B4G4R4UnormPack16	include/VkZero/types.hpp	/^        A4B4G4R4UnormPack16 = 1000340001,$/;"	e	enum:VkZero::Format
A4R4G4B4UnormPack16	include/VkZero/types.hpp	/^        A4R4G4B4UnormPack16 = 1000340000,$/;"	e	enum:VkZero::Format
A8B8G8R8SintPack32	include/VkZero/types.hpp	/^        A8B8G8R8SintPack32 = 56,$/;"	e	enum:VkZero::Format
A8B8G8R8SnormPack32	include/VkZero/types.hpp	/^        A8B8G8R8SnormPack32 = 52,$/;"	e	enum:VkZero::Format
A8B8G8R8SrgbPack32	include/VkZero/types.hpp	/^        A8B8G8R8SrgbPack32 = 57,$/;"	e	enum:VkZero::Format
A8B8G8R8SscaledPack32	include/VkZero/types.hpp	/^        A8B8G8R8SscaledPack32 = 54,$/;"	e	enum:VkZero::Format
A8B8G8R8UintPack32	include/VkZero/types.hpp	/^        A8B8G8R8UintPack32 = 55,$/;"	e	enum:VkZero::Format
A8B8G8R8UnormPack32	include/VkZero/types.hpp	/^        A8B8G8R8UnormPack32 = 51,$/;"	e	enum:VkZero::Format
A8B8G8R8UscaledPack32	include/VkZero/types.hpp	/^        A8B8G8R8UscaledPack32 = 53,$/;"	e	enum:VkZero::Format
A8Unorm	include/VkZero/types.hpp	/^        A8Unorm = 1000470001,$/;"	e	enum:VkZero::Format
ALIGN_UP	include/Engine.hpp	/^#define ALIGN_UP(/;"	d
ALIGN_UP	include/VkZero/raytracing_pipeline.hpp	/^#define ALIGN_UP(/;"	d
ALIGN_UP	include/VkZero/render_pass.hpp	/^#define ALIGN_UP(/;"	d
ASTC10x10SfloatBlock	include/VkZero/types.hpp	/^        ASTC10x10SfloatBlock = 1000066011,$/;"	e	enum:VkZero::Format
ASTC10x10SrgbBlock	include/VkZero/types.hpp	/^        ASTC10x10SrgbBlock = 180,$/;"	e	enum:VkZero::Format
ASTC10x10UnormBlock	include/VkZero/types.hpp	/^        ASTC10x10UnormBlock = 179,$/;"	e	enum:VkZero::Format
ASTC10x5SfloatBlock	include/VkZero/types.hpp	/^        ASTC10x5SfloatBlock = 1000066008,$/;"	e	enum:VkZero::Format
ASTC10x5SrgbBlock	include/VkZero/types.hpp	/^        ASTC10x5SrgbBlock = 174,$/;"	e	enum:VkZero::Format
ASTC10x5UnormBlock	include/VkZero/types.hpp	/^        ASTC10x5UnormBlock = 173,$/;"	e	enum:VkZero::Format
ASTC10x6SfloatBlock	include/VkZero/types.hpp	/^        ASTC10x6SfloatBlock = 1000066009,$/;"	e	enum:VkZero::Format
ASTC10x6SrgbBlock	include/VkZero/types.hpp	/^        ASTC10x6SrgbBlock = 176,$/;"	e	enum:VkZero::Format
ASTC10x6UnormBlock	include/VkZero/types.hpp	/^        ASTC10x6UnormBlock = 175,$/;"	e	enum:VkZero::Format
ASTC10x8SfloatBlock	include/VkZero/types.hpp	/^        ASTC10x8SfloatBlock = 1000066010,$/;"	e	enum:VkZero::Format
ASTC10x8SrgbBlock	include/VkZero/types.hpp	/^        ASTC10x8SrgbBlock = 178,$/;"	e	enum:VkZero::Format
ASTC10x8UnormBlock	include/VkZero/types.hpp	/^        ASTC10x8UnormBlock = 177,$/;"	e	enum:VkZero::Format
ASTC12x10SfloatBlock	include/VkZero/types.hpp	/^        ASTC12x10SfloatBlock = 1000066012,$/;"	e	enum:VkZero::Format
ASTC12x10SrgbBlock	include/VkZero/types.hpp	/^        ASTC12x10SrgbBlock = 182,$/;"	e	enum:VkZero::Format
ASTC12x10UnormBlock	include/VkZero/types.hpp	/^        ASTC12x10UnormBlock = 181,$/;"	e	enum:VkZero::Format
ASTC12x12SfloatBlock	include/VkZero/types.hpp	/^        ASTC12x12SfloatBlock = 1000066013,$/;"	e	enum:VkZero::Format
ASTC12x12SrgbBlock	include/VkZero/types.hpp	/^        ASTC12x12SrgbBlock = 184,$/;"	e	enum:VkZero::Format
ASTC12x12UnormBlock	include/VkZero/types.hpp	/^        ASTC12x12UnormBlock = 183,$/;"	e	enum:VkZero::Format
ASTC4x4SfloatBlock	include/VkZero/types.hpp	/^        ASTC4x4SfloatBlock = 1000066000,$/;"	e	enum:VkZero::Format
ASTC4x4SrgbBlock	include/VkZero/types.hpp	/^        ASTC4x4SrgbBlock = 158,$/;"	e	enum:VkZero::Format
ASTC4x4UnormBlock	include/VkZero/types.hpp	/^        ASTC4x4UnormBlock = 157,$/;"	e	enum:VkZero::Format
ASTC5x4SfloatBlock	include/VkZero/types.hpp	/^        ASTC5x4SfloatBlock = 1000066001,$/;"	e	enum:VkZero::Format
ASTC5x4SrgbBlock	include/VkZero/types.hpp	/^        ASTC5x4SrgbBlock = 160,$/;"	e	enum:VkZero::Format
ASTC5x4UnormBlock	include/VkZero/types.hpp	/^        ASTC5x4UnormBlock = 159,$/;"	e	enum:VkZero::Format
ASTC5x5SfloatBlock	include/VkZero/types.hpp	/^        ASTC5x5SfloatBlock = 1000066002,$/;"	e	enum:VkZero::Format
ASTC5x5SrgbBlock	include/VkZero/types.hpp	/^        ASTC5x5SrgbBlock = 162,$/;"	e	enum:VkZero::Format
ASTC5x5UnormBlock	include/VkZero/types.hpp	/^        ASTC5x5UnormBlock = 161,$/;"	e	enum:VkZero::Format
ASTC6x5SfloatBlock	include/VkZero/types.hpp	/^        ASTC6x5SfloatBlock = 1000066003,$/;"	e	enum:VkZero::Format
ASTC6x5SrgbBlock	include/VkZero/types.hpp	/^        ASTC6x5SrgbBlock = 164,$/;"	e	enum:VkZero::Format
ASTC6x5UnormBlock	include/VkZero/types.hpp	/^        ASTC6x5UnormBlock = 163,$/;"	e	enum:VkZero::Format
ASTC6x6SfloatBlock	include/VkZero/types.hpp	/^        ASTC6x6SfloatBlock = 1000066004,$/;"	e	enum:VkZero::Format
ASTC6x6SrgbBlock	include/VkZero/types.hpp	/^        ASTC6x6SrgbBlock = 166,$/;"	e	enum:VkZero::Format
ASTC6x6UnormBlock	include/VkZero/types.hpp	/^        ASTC6x6UnormBlock = 165,$/;"	e	enum:VkZero::Format
ASTC8x5SfloatBlock	include/VkZero/types.hpp	/^        ASTC8x5SfloatBlock = 1000066005,$/;"	e	enum:VkZero::Format
ASTC8x5SrgbBlock	include/VkZero/types.hpp	/^        ASTC8x5SrgbBlock = 168,$/;"	e	enum:VkZero::Format
ASTC8x5UnormBlock	include/VkZero/types.hpp	/^        ASTC8x5UnormBlock = 167,$/;"	e	enum:VkZero::Format
ASTC8x6SfloatBlock	include/VkZero/types.hpp	/^        ASTC8x6SfloatBlock = 1000066006,$/;"	e	enum:VkZero::Format
ASTC8x6SrgbBlock	include/VkZero/types.hpp	/^        ASTC8x6SrgbBlock = 170,$/;"	e	enum:VkZero::Format
ASTC8x6UnormBlock	include/VkZero/types.hpp	/^        ASTC8x6UnormBlock = 169,$/;"	e	enum:VkZero::Format
ASTC8x8SfloatBlock	include/VkZero/types.hpp	/^        ASTC8x8SfloatBlock = 1000066007,$/;"	e	enum:VkZero::Format
ASTC8x8SrgbBlock	include/VkZero/types.hpp	/^        ASTC8x8SrgbBlock = 172,$/;"	e	enum:VkZero::Format
ASTC8x8UnormBlock	include/VkZero/types.hpp	/^        ASTC8x8UnormBlock = 171,$/;"	e	enum:VkZero::Format
ATTACHMENT_COLOR	include/VkZero/render_pass.hpp	/^    ATTACHMENT_COLOR,$/;"	e	enum:VkZero::AttachmentBase::AttachmentType
ATTACHMENT_DEPTH	include/VkZero/render_pass.hpp	/^    ATTACHMENT_DEPTH,$/;"	e	enum:VkZero::AttachmentBase::AttachmentType
ATTACHMENT_INPUT	include/VkZero/render_pass.hpp	/^    ATTACHMENT_INPUT,$/;"	e	enum:VkZero::AttachmentBase::AttachmentType
ATTACHMENT_PRESERVE	include/VkZero/render_pass.hpp	/^    ATTACHMENT_PRESERVE,$/;"	e	enum:VkZero::AttachmentBase::AttachmentType
Adding New Shaders	README.md	/^## Adding New Shaders$/;"	s	chapter:VoxelEngine
AllBindings	include/VkZero/binding.hpp	/^  using AllBindings = decltype(std::tuple_cat($/;"	t	struct:VkZero::CombinedBindings
Arguments_must_be_floating_point_values	include/FastNoiseLite.hpp	/^struct FastNoiseLite::Arguments_must_be_floating_point_values<double> {};$/;"	s	class:FastNoiseLite
Arguments_must_be_floating_point_values	include/FastNoiseLite.hpp	/^struct FastNoiseLite::Arguments_must_be_floating_point_values<float> {};$/;"	s	class:FastNoiseLite
Arguments_must_be_floating_point_values	include/FastNoiseLite.hpp	/^struct FastNoiseLite::Arguments_must_be_floating_point_values<long double> {};$/;"	s	class:FastNoiseLite
AttachmentBase	include/VkZero/render_pass.hpp	/^struct AttachmentBase {$/;"	s	namespace:VkZero
AttachmentBase	src/VkZero/graphics_renderpass.cpp	/^AttachmentBase::AttachmentBase(const char *name) {$/;"	f	class:AttachmentBase
AttachmentBase	src/VkZero/graphics_renderpass.cpp	/^AttachmentBase::AttachmentBase(const char *name, VkFormat format, int location,$/;"	f	class:AttachmentBase
AttachmentFeedbackLoopOptimal	include/VkZero/types.hpp	/^        AttachmentFeedbackLoopOptimal = 1000339000,$/;"	e	enum:VkZero::ImageLayout
AttachmentImage	include/VkZero/image.hpp	/^    using AttachmentImage = class ImageBase<3>;$/;"	t	namespace:VkZero	typeref:class:ImageBase<3>
AttachmentImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  AttachmentImpl_T(const char *name) : name(name), type(3) {}$/;"	f	struct:VkZero::AttachmentImpl_T
AttachmentImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  AttachmentImpl_T(const char *name, VkFormat format, int location, int type)$/;"	f	struct:VkZero::AttachmentImpl_T
AttachmentImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^struct AttachmentImpl_T {$/;"	s	namespace:VkZero
AttachmentOptimal	include/VkZero/types.hpp	/^        AttachmentOptimal = 1000314001,$/;"	e	enum:VkZero::ImageLayout
AttachmentType	include/VkZero/render_pass.hpp	/^  enum class AttachmentType {$/;"	g	struct:VkZero::AttachmentBase
Attachments	include/VkZero/graphics_pipeline.hpp	/^  using Attachments = ShaderGroup::Attachments;$/;"	t	class:VkZero::GraphicsPipeline	typeref:typename:ShaderGroup::Attachments
Attachments	include/VkZero/raytracing_pipeline.hpp	/^  using Attachments = ShaderGroup::Attachments;$/;"	t	class:VkZero::RaytracingPipeline	typeref:typename:ShaderGroup::Attachments
Attachments	include/VkZero/shader.hpp	/^        using Attachments = ShaderDetails::attachments_extractor<std::tuple<ShaderOptions...>>::/;"	t	class:VkZero::Shader	typeref:typename:ShaderDetails::attachments_extractor<std::tuple<ShaderOptions...>>::type::Options
Attachments	include/VkZero/shader_group.hpp	/^    using Attachments =$/;"	t	class:VkZero::ShaderGroup	typeref:typename:ShaderGroupDetails::attachment_collector<shaders>::value
B10G11R11UfloatPack32	include/VkZero/types.hpp	/^        B10G11R11UfloatPack32 = 122,$/;"	e	enum:VkZero::Format
B10X6G10X6R10X6G10X6422Unorm4Pack16	include/VkZero/types.hpp	/^        B10X6G10X6R10X6G10X6422Unorm4Pack16 = 1000156011,$/;"	e	enum:VkZero::Format
B12X4G12X4R12X4G12X4422Unorm4Pack16	include/VkZero/types.hpp	/^        B12X4G12X4R12X4G12X4422Unorm4Pack16 = 1000156021,$/;"	e	enum:VkZero::Format
B16G16R16G16422Unorm	include/VkZero/types.hpp	/^        B16G16R16G16422Unorm = 1000156028,$/;"	e	enum:VkZero::Format
B4G4R4A4UnormPack16	include/VkZero/types.hpp	/^        B4G4R4A4UnormPack16 = 3,$/;"	e	enum:VkZero::Format
B5G5R5A1UnormPack16	include/VkZero/types.hpp	/^        B5G5R5A1UnormPack16 = 7,$/;"	e	enum:VkZero::Format
B5G6R5UnormPack16	include/VkZero/types.hpp	/^        B5G6R5UnormPack16 = 5,$/;"	e	enum:VkZero::Format
B8G8R8A8Sint	include/VkZero/types.hpp	/^        B8G8R8A8Sint = 49,$/;"	e	enum:VkZero::Format
B8G8R8A8Snorm	include/VkZero/types.hpp	/^        B8G8R8A8Snorm = 45,$/;"	e	enum:VkZero::Format
B8G8R8A8Srgb	include/VkZero/types.hpp	/^        B8G8R8A8Srgb = 50,$/;"	e	enum:VkZero::Format
B8G8R8A8Sscaled	include/VkZero/types.hpp	/^        B8G8R8A8Sscaled = 47,$/;"	e	enum:VkZero::Format
B8G8R8A8Uint	include/VkZero/types.hpp	/^        B8G8R8A8Uint = 48,$/;"	e	enum:VkZero::Format
B8G8R8A8Unorm	include/VkZero/types.hpp	/^        B8G8R8A8Unorm = 44,$/;"	e	enum:VkZero::Format
B8G8R8A8Uscaled	include/VkZero/types.hpp	/^        B8G8R8A8Uscaled = 46,$/;"	e	enum:VkZero::Format
B8G8R8G8422Unorm	include/VkZero/types.hpp	/^        B8G8R8G8422Unorm = 1000156001,$/;"	e	enum:VkZero::Format
B8G8R8Sint	include/VkZero/types.hpp	/^        B8G8R8Sint = 35,$/;"	e	enum:VkZero::Format
B8G8R8Snorm	include/VkZero/types.hpp	/^        B8G8R8Snorm = 31,$/;"	e	enum:VkZero::Format
B8G8R8Srgb	include/VkZero/types.hpp	/^        B8G8R8Srgb = 36,$/;"	e	enum:VkZero::Format
B8G8R8Sscaled	include/VkZero/types.hpp	/^        B8G8R8Sscaled = 33,$/;"	e	enum:VkZero::Format
B8G8R8Uint	include/VkZero/types.hpp	/^        B8G8R8Uint = 34,$/;"	e	enum:VkZero::Format
B8G8R8Unorm	include/VkZero/types.hpp	/^        B8G8R8Unorm = 30,$/;"	e	enum:VkZero::Format
B8G8R8Uscaled	include/VkZero/types.hpp	/^        B8G8R8Uscaled = 32,$/;"	e	enum:VkZero::Format
BC1RgbSrgbBlock	include/VkZero/types.hpp	/^        BC1RgbSrgbBlock = 132,$/;"	e	enum:VkZero::Format
BC1RgbUnormBlock	include/VkZero/types.hpp	/^        BC1RgbUnormBlock = 131,$/;"	e	enum:VkZero::Format
BC1RgbaSrgbBlock	include/VkZero/types.hpp	/^        BC1RgbaSrgbBlock = 134,$/;"	e	enum:VkZero::Format
BC1RgbaUnormBlock	include/VkZero/types.hpp	/^        BC1RgbaUnormBlock = 133,$/;"	e	enum:VkZero::Format
BC2SrgbBlock	include/VkZero/types.hpp	/^        BC2SrgbBlock = 136,$/;"	e	enum:VkZero::Format
BC2UnormBlock	include/VkZero/types.hpp	/^        BC2UnormBlock = 135,$/;"	e	enum:VkZero::Format
BC3SrgbBlock	include/VkZero/types.hpp	/^        BC3SrgbBlock = 138,$/;"	e	enum:VkZero::Format
BC3UnormBlock	include/VkZero/types.hpp	/^        BC3UnormBlock = 137,$/;"	e	enum:VkZero::Format
BC4SnormBlock	include/VkZero/types.hpp	/^        BC4SnormBlock = 140,$/;"	e	enum:VkZero::Format
BC4UnormBlock	include/VkZero/types.hpp	/^        BC4UnormBlock = 139,$/;"	e	enum:VkZero::Format
BC5SnormBlock	include/VkZero/types.hpp	/^        BC5SnormBlock = 142,$/;"	e	enum:VkZero::Format
BC5UnormBlock	include/VkZero/types.hpp	/^        BC5UnormBlock = 141,$/;"	e	enum:VkZero::Format
BC6HSfloatBlock	include/VkZero/types.hpp	/^        BC6HSfloatBlock = 144,$/;"	e	enum:VkZero::Format
BC6HUfloatBlock	include/VkZero/types.hpp	/^        BC6HUfloatBlock = 143,$/;"	e	enum:VkZero::Format
BC7SrgbBlock	include/VkZero/types.hpp	/^        BC7SrgbBlock = 146,$/;"	e	enum:VkZero::Format
BC7UnormBlock	include/VkZero/types.hpp	/^        BC7UnormBlock = 145,$/;"	e	enum:VkZero::Format
Bind	include/VkZero/binding.hpp	/^template <typename type, int binding> struct Bind {$/;"	s	namespace:VkZero
BindResource	include/VkZero/bind_resource.hpp	/^    class BindResource$/;"	c	namespace:VkZero
BindingResources	include/VkZero/shader_resource_set.hpp	/^  using BindingResources = std::tuple<Bindings...>;$/;"	t	class:VkZero::ShaderResourceSet	typeref:typename:std::tuple<Bindings...>
Bindings	include/VkZero/shader.hpp	/^        using Bindings = ShaderDetails::bindings_extractor<std::tuple<ShaderOptions...>>::type::/;"	t	class:VkZero::Shader	typeref:typename:ShaderDetails::bindings_extractor<std::tuple<ShaderOptions...>>::type::Options
BindingsList	include/VkZero/shader.hpp	/^        using BindingsList = Bindings;$/;"	t	class:VkZero::Shader	typeref:typename:Bindings
Building	README.md	/^## Building$/;"	s	chapter:VoxelEngine
CalculateFractalBounding	include/FastNoiseLite.hpp	/^  void CalculateFractalBounding() {$/;"	f	class:FastNoiseLite	typeref:typename:void
Camera	include/Camera.hpp	/^class Camera {$/;"	c
Camera	src/Camera.cpp	/^Camera::Camera(std::unique_ptr<VkZero::Window> &window) {$/;"	f	class:Camera
CellularDistanceFunction	include/FastNoiseLite.hpp	/^  enum CellularDistanceFunction {$/;"	g	class:FastNoiseLite
CellularDistanceFunction_Euclidean	include/FastNoiseLite.hpp	/^    CellularDistanceFunction_Euclidean,$/;"	e	enum:FastNoiseLite::CellularDistanceFunction
CellularDistanceFunction_EuclideanSq	include/FastNoiseLite.hpp	/^    CellularDistanceFunction_EuclideanSq,$/;"	e	enum:FastNoiseLite::CellularDistanceFunction
CellularDistanceFunction_Hybrid	include/FastNoiseLite.hpp	/^    CellularDistanceFunction_Hybrid$/;"	e	enum:FastNoiseLite::CellularDistanceFunction
CellularDistanceFunction_Manhattan	include/FastNoiseLite.hpp	/^    CellularDistanceFunction_Manhattan,$/;"	e	enum:FastNoiseLite::CellularDistanceFunction
CellularReturnType	include/FastNoiseLite.hpp	/^  enum CellularReturnType {$/;"	g	class:FastNoiseLite
CellularReturnType_CellValue	include/FastNoiseLite.hpp	/^    CellularReturnType_CellValue,$/;"	e	enum:FastNoiseLite::CellularReturnType
CellularReturnType_Distance	include/FastNoiseLite.hpp	/^    CellularReturnType_Distance,$/;"	e	enum:FastNoiseLite::CellularReturnType
CellularReturnType_Distance2	include/FastNoiseLite.hpp	/^    CellularReturnType_Distance2,$/;"	e	enum:FastNoiseLite::CellularReturnType
CellularReturnType_Distance2Add	include/FastNoiseLite.hpp	/^    CellularReturnType_Distance2Add,$/;"	e	enum:FastNoiseLite::CellularReturnType
CellularReturnType_Distance2Div	include/FastNoiseLite.hpp	/^    CellularReturnType_Distance2Div$/;"	e	enum:FastNoiseLite::CellularReturnType
CellularReturnType_Distance2Mul	include/FastNoiseLite.hpp	/^    CellularReturnType_Distance2Mul,$/;"	e	enum:FastNoiseLite::CellularReturnType
CellularReturnType_Distance2Sub	include/FastNoiseLite.hpp	/^    CellularReturnType_Distance2Sub,$/;"	e	enum:FastNoiseLite::CellularReturnType
Cleaning	README.md	/^## Cleaning$/;"	s	chapter:VoxelEngine
ColorAttachment	include/VkZero/render_pass.hpp	/^  ColorAttachment()$/;"	f	struct:VkZero::ColorAttachment
ColorAttachment	include/VkZero/render_pass.hpp	/^struct ColorAttachment : public AttachmentBase {$/;"	s	namespace:VkZero
ColorAttachmentOptimal	include/VkZero/types.hpp	/^        ColorAttachmentOptimal = 2,$/;"	e	enum:VkZero::ImageLayout
CombinedBindings	include/VkZero/binding.hpp	/^template <typename... Shaders> struct CombinedBindings {$/;"	s	namespace:VkZero
CommandManager	include/CommandManager.hpp	/^class CommandManager {$/;"	c
CommandManager	src/CommandManager.cpp	/^CommandManager::CommandManager() {$/;"	f	class:CommandManager
CreateDebugUtilsMessengerEXT	src/VkZero/core.cpp	/^VkResult VkZeroCoreImpl_T::CreateDebugUtilsMessengerEXT($/;"	f	class:VkZeroCoreImpl_T	typeref:typename:VkResult
CreateImages	src/VkZero/image.cpp	/^void CreateImages($/;"	f	typeref:typename:void
CreateStagingBuffer	src/VkZero/image.cpp	/^void CreateStagingBuffer(struct StagingData_T** staging, struct ImageImpl_T* impl, size_t imageC/;"	f	typeref:typename:void
CubicLerp	include/FastNoiseLite.hpp	/^  static float CubicLerp(float a, float b, float c, float d, float t) {$/;"	f	class:FastNoiseLite	typeref:typename:float
D16Unorm	include/VkZero/types.hpp	/^        D16Unorm = 124,$/;"	e	enum:VkZero::Format
D16UnormS8Uint	include/VkZero/types.hpp	/^        D16UnormS8Uint = 128,$/;"	e	enum:VkZero::Format
D24UnormS8Uint	include/VkZero/types.hpp	/^        D24UnormS8Uint = 129,$/;"	e	enum:VkZero::Format
D32Sfloat	include/VkZero/types.hpp	/^        D32Sfloat = 126,$/;"	e	enum:VkZero::Format
D32SfloatS8Uint	include/VkZero/types.hpp	/^        D32SfloatS8Uint = 130,$/;"	e	enum:VkZero::Format
DEFINE_VK_ZERO_CORE	include/VkZero/Internal/core_internal.hpp	/^#define DEFINE_VK_ZERO_CORE /;"	d
Dependencies	README.md	/^## Dependencies$/;"	s	chapter:VoxelEngine
DepthAttachment	include/VkZero/render_pass.hpp	/^  DepthAttachment()$/;"	f	struct:VkZero::DepthAttachment
DepthAttachment	include/VkZero/render_pass.hpp	/^struct DepthAttachment : public AttachmentBase {$/;"	s	namespace:VkZero
DepthAttachmentOptimal	include/VkZero/types.hpp	/^        DepthAttachmentOptimal = 1000241000,$/;"	e	enum:VkZero::ImageLayout
DepthAttachmentStencilReadOnlyOptimal	include/VkZero/types.hpp	/^        DepthAttachmentStencilReadOnlyOptimal = 1000117001,$/;"	e	enum:VkZero::ImageLayout
DepthReadOnlyOptimal	include/VkZero/types.hpp	/^        DepthReadOnlyOptimal = 1000241001,$/;"	e	enum:VkZero::ImageLayout
DepthReadOnlyStencilAttachmentOptimal	include/VkZero/types.hpp	/^        DepthReadOnlyStencilAttachmentOptimal = 1000117000,$/;"	e	enum:VkZero::ImageLayout
DepthStencilAttachmentOptimal	include/VkZero/types.hpp	/^        DepthStencilAttachmentOptimal = 3,$/;"	e	enum:VkZero::ImageLayout
DepthStencilReadOnlyOptimal	include/VkZero/types.hpp	/^        DepthStencilReadOnlyOptimal = 4,$/;"	e	enum:VkZero::ImageLayout
DescriptorPool	include/VkZero/descriptor_pool.hpp	/^    class DescriptorPool$/;"	c	namespace:VkZero
DescriptorPool	src/VkZero/descriptor_pool.cpp	/^DescriptorPool::DescriptorPool()$/;"	f	class:DescriptorPool
DescriptorTypeObject	src/VkZero/descriptor_pool.cpp	/^struct DescriptorTypeObject$/;"	s	file:
DescriptorTypes	src/VkZero/descriptor_pool.cpp	/^struct DescriptorTypes<std::tuple<First, Rest...>> {$/;"	s	file:
DestroyDebugUtilsMessengerEXT	src/VkZero/core.cpp	/^void VkZeroCoreImpl_T::DestroyDebugUtilsMessengerEXT($/;"	f	class:VkZeroCoreImpl_T	typeref:typename:void
DoSingleDomainWarp	include/FastNoiseLite.hpp	/^  void DoSingleDomainWarp(int seed, float amp, float freq, FNfloat x, FNfloat y,$/;"	f	class:FastNoiseLite	typeref:typename:void
DomainWarp	include/FastNoiseLite.hpp	/^  template <typename FNfloat> void DomainWarp(FNfloat &x, FNfloat &y) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
DomainWarp	include/FastNoiseLite.hpp	/^  void DomainWarp(FNfloat &x, FNfloat &y, FNfloat &z) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
DomainWarpFractalIndependent	include/FastNoiseLite.hpp	/^  void DomainWarpFractalIndependent(FNfloat &x, FNfloat &y) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
DomainWarpFractalIndependent	include/FastNoiseLite.hpp	/^  void DomainWarpFractalIndependent(FNfloat &x, FNfloat &y, FNfloat &z) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
DomainWarpFractalProgressive	include/FastNoiseLite.hpp	/^  void DomainWarpFractalProgressive(FNfloat &x, FNfloat &y) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
DomainWarpFractalProgressive	include/FastNoiseLite.hpp	/^  void DomainWarpFractalProgressive(FNfloat &x, FNfloat &y, FNfloat &z) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
DomainWarpSingle	include/FastNoiseLite.hpp	/^  void DomainWarpSingle(FNfloat &x, FNfloat &y) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
DomainWarpSingle	include/FastNoiseLite.hpp	/^  void DomainWarpSingle(FNfloat &x, FNfloat &y, FNfloat &z) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
DomainWarpType	include/FastNoiseLite.hpp	/^  enum DomainWarpType {$/;"	g	class:FastNoiseLite
DomainWarpType_BasicGrid	include/FastNoiseLite.hpp	/^    DomainWarpType_BasicGrid$/;"	e	enum:FastNoiseLite::DomainWarpType
DomainWarpType_OpenSimplex2	include/FastNoiseLite.hpp	/^    DomainWarpType_OpenSimplex2,$/;"	e	enum:FastNoiseLite::DomainWarpType
DomainWarpType_OpenSimplex2Reduced	include/FastNoiseLite.hpp	/^    DomainWarpType_OpenSimplex2Reduced,$/;"	e	enum:FastNoiseLite::DomainWarpType
E5B9G9R9UfloatPack32	include/VkZero/types.hpp	/^        E5B9G9R9UfloatPack32 = 123,$/;"	e	enum:VkZero::Format
EACR11G11SnormBlock	include/VkZero/types.hpp	/^        EACR11G11SnormBlock = 156,$/;"	e	enum:VkZero::Format
EACR11G11UnormBlock	include/VkZero/types.hpp	/^        EACR11G11UnormBlock = 155,$/;"	e	enum:VkZero::Format
EACR11SnormBlock	include/VkZero/types.hpp	/^        EACR11SnormBlock = 154,$/;"	e	enum:VkZero::Format
EACR11UnormBlock	include/VkZero/types.hpp	/^        EACR11UnormBlock = 153,$/;"	e	enum:VkZero::Format
ETC2R8G8B8A1SrgbBlock	include/VkZero/types.hpp	/^        ETC2R8G8B8A1SrgbBlock = 150,$/;"	e	enum:VkZero::Format
ETC2R8G8B8A1UnormBlock	include/VkZero/types.hpp	/^        ETC2R8G8B8A1UnormBlock = 149,$/;"	e	enum:VkZero::Format
ETC2R8G8B8A8SrgbBlock	include/VkZero/types.hpp	/^        ETC2R8G8B8A8SrgbBlock = 152,$/;"	e	enum:VkZero::Format
ETC2R8G8B8A8UnormBlock	include/VkZero/types.hpp	/^        ETC2R8G8B8A8UnormBlock = 151,$/;"	e	enum:VkZero::Format
ETC2R8G8B8SrgbBlock	include/VkZero/types.hpp	/^        ETC2R8G8B8SrgbBlock = 148,$/;"	e	enum:VkZero::Format
ETC2R8G8B8UnormBlock	include/VkZero/types.hpp	/^        ETC2R8G8B8UnormBlock = 147,$/;"	e	enum:VkZero::Format
Element	include/VkZero/render_pass.hpp	/^    using Element = std::tuple_element_t<Index, Tuple>;$/;"	t	function:VkZero::RenderPassResourceSetDetails::findResourceIndex	typeref:typename:std::tuple_element_t<Index,Tuple>
FASTNOISELITE_H	include/FastNoiseLite.hpp	/^#define FASTNOISELITE_H$/;"	d
FNL_IMPL	include/VoxelWorld.hpp	/^#define FNL_IMPL$/;"	d
FastAbs	include/FastNoiseLite.hpp	/^  static float FastAbs(float f) { return f < 0 ? -f : f; }$/;"	f	class:FastNoiseLite	typeref:typename:float
FastFloor	include/FastNoiseLite.hpp	/^  template <typename FNfloat> static int FastFloor(FNfloat f) {$/;"	f	class:FastNoiseLite	typeref:typename:int
FastMax	include/FastNoiseLite.hpp	/^  static float FastMax(float a, float b) { return a > b ? a : b; }$/;"	f	class:FastNoiseLite	typeref:typename:float
FastMin	include/FastNoiseLite.hpp	/^  static float FastMin(float a, float b) { return a < b ? a : b; }$/;"	f	class:FastNoiseLite	typeref:typename:float
FastNoiseLite	include/FastNoiseLite.hpp	/^  FastNoiseLite(int seed = 1337) {$/;"	f	class:FastNoiseLite
FastNoiseLite	include/FastNoiseLite.hpp	/^class FastNoiseLite {$/;"	c
FastRound	include/FastNoiseLite.hpp	/^  template <typename FNfloat> static int FastRound(FNfloat f) {$/;"	f	class:FastNoiseLite	typeref:typename:int
FastSqrt	include/FastNoiseLite.hpp	/^  static float FastSqrt(float f) { return sqrtf(f); }$/;"	f	class:FastNoiseLite	typeref:typename:float
Features	README.md	/^## Features$/;"	s	chapter:VoxelEngine
FixedString	include/VkZero/fixed_string.hpp	/^  constexpr FixedString(const char (&str)[N]) { std::copy_n(str, N, value); }$/;"	f	struct:VkZero::FixedString
FixedString	include/VkZero/fixed_string.hpp	/^template <size_t N> struct FixedString {$/;"	s	namespace:VkZero
Format	include/VkZero/types.hpp	/^    enum class Format : uint32_t {$/;"	g	namespace:VkZero	typeref:typename:uint32_t
FractalType	include/FastNoiseLite.hpp	/^  enum FractalType {$/;"	g	class:FastNoiseLite
FractalType_DomainWarpIndependent	include/FastNoiseLite.hpp	/^    FractalType_DomainWarpIndependent$/;"	e	enum:FastNoiseLite::FractalType
FractalType_DomainWarpProgressive	include/FastNoiseLite.hpp	/^    FractalType_DomainWarpProgressive,$/;"	e	enum:FastNoiseLite::FractalType
FractalType_FBm	include/FastNoiseLite.hpp	/^    FractalType_FBm,$/;"	e	enum:FastNoiseLite::FractalType
FractalType_None	include/FastNoiseLite.hpp	/^    FractalType_None,$/;"	e	enum:FastNoiseLite::FractalType
FractalType_PingPong	include/FastNoiseLite.hpp	/^    FractalType_PingPong,$/;"	e	enum:FastNoiseLite::FractalType
FractalType_Ridged	include/FastNoiseLite.hpp	/^    FractalType_Ridged,$/;"	e	enum:FastNoiseLite::FractalType
FragmentDensityMapOptimal	include/VkZero/types.hpp	/^        FragmentDensityMapOptimal = 1000218000,$/;"	e	enum:VkZero::ImageLayout
FragmentShadingRateAttachmentOptimal	include/VkZero/types.hpp	/^        FragmentShadingRateAttachmentOptimal = 1000164003,$/;"	e	enum:VkZero::ImageLayout
G10X6B10X6G10X6R10X6422Unorm4Pack16	include/VkZero/types.hpp	/^        G10X6B10X6G10X6R10X6422Unorm4Pack16 = 1000156010,$/;"	e	enum:VkZero::Format
G10X6B10X6R10X62Plane420Unorm3Pack16	include/VkZero/types.hpp	/^        G10X6B10X6R10X62Plane420Unorm3Pack16 = 1000156013,$/;"	e	enum:VkZero::Format
G10X6B10X6R10X62Plane422Unorm3Pack16	include/VkZero/types.hpp	/^        G10X6B10X6R10X62Plane422Unorm3Pack16 = 1000156015,$/;"	e	enum:VkZero::Format
G10X6B10X6R10X62Plane444Unorm3Pack16	include/VkZero/types.hpp	/^        G10X6B10X6R10X62Plane444Unorm3Pack16 = 1000330001,$/;"	e	enum:VkZero::Format
G10X6B10X6R10X63Plane420Unorm3Pack16	include/VkZero/types.hpp	/^        G10X6B10X6R10X63Plane420Unorm3Pack16 = 1000156012,$/;"	e	enum:VkZero::Format
G10X6B10X6R10X63Plane422Unorm3Pack16	include/VkZero/types.hpp	/^        G10X6B10X6R10X63Plane422Unorm3Pack16 = 1000156014,$/;"	e	enum:VkZero::Format
G10X6B10X6R10X63Plane444Unorm3Pack16	include/VkZero/types.hpp	/^        G10X6B10X6R10X63Plane444Unorm3Pack16 = 1000156016,$/;"	e	enum:VkZero::Format
G12X4B12X4G12X4R12X4422Unorm4Pack16	include/VkZero/types.hpp	/^        G12X4B12X4G12X4R12X4422Unorm4Pack16 = 1000156020,$/;"	e	enum:VkZero::Format
G12X4B12X4R12X42Plane420Unorm3Pack16	include/VkZero/types.hpp	/^        G12X4B12X4R12X42Plane420Unorm3Pack16 = 1000156023,$/;"	e	enum:VkZero::Format
G12X4B12X4R12X42Plane422Unorm3Pack16	include/VkZero/types.hpp	/^        G12X4B12X4R12X42Plane422Unorm3Pack16 = 1000156025,$/;"	e	enum:VkZero::Format
G12X4B12X4R12X42Plane444Unorm3Pack16	include/VkZero/types.hpp	/^        G12X4B12X4R12X42Plane444Unorm3Pack16 = 1000330002,$/;"	e	enum:VkZero::Format
G12X4B12X4R12X43Plane420Unorm3Pack16	include/VkZero/types.hpp	/^        G12X4B12X4R12X43Plane420Unorm3Pack16 = 1000156022,$/;"	e	enum:VkZero::Format
G12X4B12X4R12X43Plane422Unorm3Pack16	include/VkZero/types.hpp	/^        G12X4B12X4R12X43Plane422Unorm3Pack16 = 1000156024,$/;"	e	enum:VkZero::Format
G12X4B12X4R12X63Plane444Unorm3Pack16	include/VkZero/types.hpp	/^        G12X4B12X4R12X63Plane444Unorm3Pack16 = 1000156026,$/;"	e	enum:VkZero::Format
G16B16G16R16422Unorm	include/VkZero/types.hpp	/^        G16B16G16R16422Unorm = 1000156027,$/;"	e	enum:VkZero::Format
G16B16R162Plane420Unorm	include/VkZero/types.hpp	/^        G16B16R162Plane420Unorm = 1000156030,$/;"	e	enum:VkZero::Format
G16B16R162Plane422Unorm	include/VkZero/types.hpp	/^        G16B16R162Plane422Unorm = 1000156032,$/;"	e	enum:VkZero::Format
G16B16R162Plane444Unorm	include/VkZero/types.hpp	/^        G16B16R162Plane444Unorm = 1000330003,$/;"	e	enum:VkZero::Format
G16B16R163Plane420Unorm	include/VkZero/types.hpp	/^        G16B16R163Plane420Unorm = 1000156029,$/;"	e	enum:VkZero::Format
G16B16R163Plane422Unorm	include/VkZero/types.hpp	/^        G16B16R163Plane422Unorm = 1000156031,$/;"	e	enum:VkZero::Format
G16B16R163Plane444Unorm	include/VkZero/types.hpp	/^        G16B16R163Plane444Unorm = 1000156033,$/;"	e	enum:VkZero::Format
G8B8G8R8422Unorm	include/VkZero/types.hpp	/^        G8B8G8R8422Unorm = 1000156000,$/;"	e	enum:VkZero::Format
G8B8R82Plane420Unorm	include/VkZero/types.hpp	/^        G8B8R82Plane420Unorm = 1000156003,$/;"	e	enum:VkZero::Format
G8B8R82Plane422Unorm	include/VkZero/types.hpp	/^        G8B8R82Plane422Unorm = 1000156005,$/;"	e	enum:VkZero::Format
G8B8R82Plane444Unorm	include/VkZero/types.hpp	/^        G8B8R82Plane444Unorm = 1000330000,$/;"	e	enum:VkZero::Format
G8B8R83Plane420Unorm	include/VkZero/types.hpp	/^        G8B8R83Plane420Unorm = 1000156002,$/;"	e	enum:VkZero::Format
G8B8R83Plane422Unorm	include/VkZero/types.hpp	/^        G8B8R83Plane422Unorm = 1000156004,$/;"	e	enum:VkZero::Format
G8B8R83Plane444Unorm	include/VkZero/types.hpp	/^        G8B8R83Plane444Unorm = 1000156006,$/;"	e	enum:VkZero::Format
GenFractalFBm	include/FastNoiseLite.hpp	/^  float GenFractalFBm(FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
GenFractalFBm	include/FastNoiseLite.hpp	/^  template <typename FNfloat> float GenFractalFBm(FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
GenFractalPingPong	include/FastNoiseLite.hpp	/^  float GenFractalPingPong(FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
GenFractalPingPong	include/FastNoiseLite.hpp	/^  float GenFractalPingPong(FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
GenFractalRidged	include/FastNoiseLite.hpp	/^  float GenFractalRidged(FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
GenFractalRidged	include/FastNoiseLite.hpp	/^  float GenFractalRidged(FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
GenNoiseSingle	include/FastNoiseLite.hpp	/^  float GenNoiseSingle(int seed, FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
GenNoiseSingle	include/FastNoiseLite.hpp	/^  float GenNoiseSingle(int seed, FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
General	include/VkZero/types.hpp	/^        General = 1,$/;"	e	enum:VkZero::ImageLayout
GetAttachments	include/VkZero/shader_group.hpp	/^struct GetAttachments<std::tuple<Attachments...>>{$/;"	s	namespace:VkZero
GetNoise	include/FastNoiseLite.hpp	/^  float GetNoise(FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
GetNoise	include/FastNoiseLite.hpp	/^  template <typename FNfloat> float GetNoise(FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
GlobalShaderLibrary	include/shaders.hpp	/^using GlobalShaderLibrary = VkZero::ShaderLibrary<$/;"	t	typeref:typename:VkZero::ShaderLibrary<main_vert,main_frag,main_rmiss,main_rgen>
GradCoord	include/FastNoiseLite.hpp	/^  float GradCoord(int seed, int xPrimed, int yPrimed, float xd,$/;"	f	class:FastNoiseLite	typeref:typename:float
GradCoord	include/FastNoiseLite.hpp	/^  float GradCoord(int seed, int xPrimed, int yPrimed, int zPrimed, float xd,$/;"	f	class:FastNoiseLite	typeref:typename:float
GradCoordDual	include/FastNoiseLite.hpp	/^  void GradCoordDual(int seed, int xPrimed, int yPrimed, float xd, float yd,$/;"	f	class:FastNoiseLite	typeref:typename:void
GradCoordDual	include/FastNoiseLite.hpp	/^  void GradCoordDual(int seed, int xPrimed, int yPrimed, int zPrimed, float xd,$/;"	f	class:FastNoiseLite	typeref:typename:void
GradCoordOut	include/FastNoiseLite.hpp	/^  void GradCoordOut(int seed, int xPrimed, int yPrimed, float &xo,$/;"	f	class:FastNoiseLite	typeref:typename:void
GradCoordOut	include/FastNoiseLite.hpp	/^  void GradCoordOut(int seed, int xPrimed, int yPrimed, int zPrimed, float &xo,$/;"	f	class:FastNoiseLite	typeref:typename:void
Gradients2D	include/FastNoiseLite.hpp	/^    static const T Gradients2D[];$/;"	m	struct:FastNoiseLite::Lookup	typeref:typename:const T[]
Gradients2D	include/FastNoiseLite.hpp	/^const T FastNoiseLite::Lookup<T>::Gradients2D[] = {$/;"	m	class:FastNoiseLite::Lookup<T>	typeref:typename:const T[]
Gradients3D	include/FastNoiseLite.hpp	/^    static const T Gradients3D[];$/;"	m	struct:FastNoiseLite::Lookup	typeref:typename:const T[]
Gradients3D	include/FastNoiseLite.hpp	/^const T FastNoiseLite::Lookup<T>::Gradients3D[] = {$/;"	m	class:FastNoiseLite::Lookup<T>	typeref:typename:const T[]
GraphicsPipeline	include/VkZero/graphics_pipeline.hpp	/^  GraphicsPipeline(ShaderGroup &shaderGroup,$/;"	f	class:VkZero::GraphicsPipeline
GraphicsPipeline	include/VkZero/graphics_pipeline.hpp	/^class GraphicsPipeline : public GraphicsPipelineBase {$/;"	c	namespace:VkZero
GraphicsPipelineBase	include/VkZero/graphics_pipeline.hpp	/^struct GraphicsPipelineBase {$/;"	s	namespace:VkZero
GraphicsPipelineBase	src/VkZero/graphics_pipeline.cpp	/^GraphicsPipelineBase::GraphicsPipelineBase(ShaderGroupImpl *shaderGroup,$/;"	f	class:GraphicsPipelineBase
GraphicsPipelineImpl_T	include/VkZero/Internal/graphics_pipeline_internal.hpp	/^struct GraphicsPipelineImpl_T {$/;"	s	namespace:VkZero
GraphicsPipelineImpl_T	src/VkZero/graphics_pipeline.cpp	/^GraphicsPipelineImpl_T::GraphicsPipelineImpl_T(ShaderGroupImpl *shaderGroup,$/;"	f	class:GraphicsPipelineImpl_T
GraphicsRenderpass	include/VkZero/render_pass.hpp	/^  GraphicsRenderpass(uint32_t width, uint32_t height, Resources &resource,$/;"	f	class:VkZero::GraphicsRenderpass
GraphicsRenderpass	include/VkZero/render_pass.hpp	/^class GraphicsRenderpass : public GraphicsRenderpassBase {$/;"	c	namespace:VkZero
GraphicsRenderpassBase	include/VkZero/render_pass.hpp	/^struct GraphicsRenderpassBase {$/;"	s	namespace:VkZero
GraphicsRenderpassBase	src/VkZero/graphics_renderpass.cpp	/^GraphicsRenderpassBase::GraphicsRenderpassBase($/;"	f	class:GraphicsRenderpassBase
GraphicsRenderpassImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^struct GraphicsRenderpassImpl_T : public RenderpassImpl_T {$/;"	s	namespace:VkZero
GraphicsRenderpassImpl_T	src/VkZero/graphics_renderpass.cpp	/^GraphicsRenderpassImpl_T::GraphicsRenderpassImpl_T($/;"	f	class:GraphicsRenderpassImpl_T
HEIGHT	include/Engine.hpp	/^const uint32_t HEIGHT = 1280;$/;"	v	typeref:typename:const uint32_t
Hash	include/FastNoiseLite.hpp	/^  static int Hash(int seed, int xPrimed, int yPrimed) {$/;"	f	class:FastNoiseLite	typeref:typename:int
Hash	include/FastNoiseLite.hpp	/^  static int Hash(int seed, int xPrimed, int yPrimed, int zPrimed) {$/;"	f	class:FastNoiseLite	typeref:typename:int
Image	include/VkZero/image.hpp	/^    class Image$/;"	c	namespace:VkZero
Image	src/VkZero/image.cpp	/^Image::Image(VkImage* images, VkImageView* imageViews, size_t imageCount, ImageData* data)$/;"	f	class:Image
Image	src/VkZero/image.cpp	/^Image::Image(uint32_t width, uint32_t height, uint32_t depth,$/;"	f	class:Image
ImageBase	include/VkZero/image.hpp	/^        ImageBase(VkImage* vk_images, VkImageView* imageViews, size_t imageCount) :$/;"	f	class:VkZero::ImageBase
ImageBase	include/VkZero/image.hpp	/^        ImageBase(uint32_t width, uint32_t height, uint32_t depth,$/;"	f	class:VkZero::ImageBase
ImageBase	include/VkZero/image.hpp	/^    class ImageBase : public BindResource, Image$/;"	c	namespace:VkZero
ImageData	include/VkZero/image.hpp	/^        using ImageData = struct ImageData_T*;$/;"	t	class:VkZero::Image	typeref:struct:ImageData_T *
ImageData_T	include/VkZero/Internal/image_internal.hpp	/^    struct ImageData_T$/;"	s	namespace:VkZero
ImageImpl	include/VkZero/image.hpp	/^        using ImageImpl = struct ImageImpl_T*;$/;"	t	class:VkZero::Image	typeref:struct:ImageImpl_T *
ImageImpl_T	include/VkZero/Internal/image_internal.hpp	/^    struct ImageImpl_T$/;"	s	namespace:VkZero
ImageLayout	include/VkZero/types.hpp	/^    enum class ImageLayout : uint32_t {$/;"	g	namespace:VkZero	typeref:typename:uint32_t
InputAttachment	include/VkZero/render_pass.hpp	/^  InputAttachment()$/;"	f	struct:VkZero::InputAttachment
InputAttachment	include/VkZero/render_pass.hpp	/^struct InputAttachment : public AttachmentBase {$/;"	s	namespace:VkZero
InterpHermite	include/FastNoiseLite.hpp	/^  static float InterpHermite(float t) { return t * t * (3 - 2 * t); }$/;"	f	class:FastNoiseLite	typeref:typename:float
InterpQuintic	include/FastNoiseLite.hpp	/^  static float InterpQuintic(float t) {$/;"	f	class:FastNoiseLite	typeref:typename:float
Lerp	include/FastNoiseLite.hpp	/^  static float Lerp(float a, float b, float t) { return a + t * (b - a); }$/;"	f	class:FastNoiseLite	typeref:typename:float
License	README.md	/^## License$/;"	s	chapter:VoxelEngine
Lookup	include/FastNoiseLite.hpp	/^  template <typename T> struct Lookup {$/;"	s	class:FastNoiseLite
MAT_AIR	include/VoxelWorld.hpp	/^#define MAT_AIR /;"	d
MAT_FLOWER	include/VoxelWorld.hpp	/^#define MAT_FLOWER /;"	d
MAT_GRASS	include/VoxelWorld.hpp	/^#define MAT_GRASS /;"	d
MAT_HAS_COLLISION	include/VoxelWorld.hpp	/^#define MAT_HAS_COLLISION(/;"	d
MAT_IS_STONE	include/VoxelWorld.hpp	/^#define MAT_IS_STONE(/;"	d
MAT_PLANT_CORE	include/VoxelWorld.hpp	/^#define MAT_PLANT_CORE /;"	d
MAT_STONE	include/VoxelWorld.hpp	/^#define MAT_STONE /;"	d
MAT_STONE2	include/VoxelWorld.hpp	/^#define MAT_STONE2 /;"	d
MAT_STONE3	include/VoxelWorld.hpp	/^#define MAT_STONE3 /;"	d
MAT_WATER	include/VoxelWorld.hpp	/^#define MAT_WATER /;"	d
MAX_DESCRIPTOR_COUNT	src/VkZero/descriptor_pool.cpp	/^#define MAX_DESCRIPTOR_COUNT /;"	d	file:
MAX_FRAMEBUFFER_COUNT	include/VkZero/info.hpp	/^#define MAX_FRAMEBUFFER_COUNT /;"	d
MAX_FRAMES_IN_FLIGHT	include/VkZero/info.hpp	/^#define MAX_FRAMES_IN_FLIGHT /;"	d
MAX_POOL_SETS	src/VkZero/descriptor_pool.cpp	/^#define MAX_POOL_SETS /;"	d	file:
NO_FUNCTION	include/VkZero/render_pass.hpp	/^  static void NO_FUNCTION(VkCommandBuffer commandBuffer, uint32_t currentFrame) {}$/;"	f	class:VkZero::RaytracingRenderPass	typeref:typename:void
NoiseType	include/FastNoiseLite.hpp	/^  enum NoiseType {$/;"	g	class:FastNoiseLite
NoiseType_Cellular	include/FastNoiseLite.hpp	/^    NoiseType_Cellular,$/;"	e	enum:FastNoiseLite::NoiseType
NoiseType_OpenSimplex2	include/FastNoiseLite.hpp	/^    NoiseType_OpenSimplex2,$/;"	e	enum:FastNoiseLite::NoiseType
NoiseType_OpenSimplex2S	include/FastNoiseLite.hpp	/^    NoiseType_OpenSimplex2S,$/;"	e	enum:FastNoiseLite::NoiseType
NoiseType_Perlin	include/FastNoiseLite.hpp	/^    NoiseType_Perlin,$/;"	e	enum:FastNoiseLite::NoiseType
NoiseType_Value	include/FastNoiseLite.hpp	/^    NoiseType_Value$/;"	e	enum:FastNoiseLite::NoiseType
NoiseType_ValueCubic	include/FastNoiseLite.hpp	/^    NoiseType_ValueCubic,$/;"	e	enum:FastNoiseLite::NoiseType
Options	include/VkZero/shader_bindings.hpp	/^  using Options = PushConstantType;$/;"	t	struct:VkZero::ShaderPushConstant	typeref:typename:PushConstantType
Options	include/VkZero/shader_bindings.hpp	/^  using Options = std::tuple<Attachments...>;$/;"	t	struct:VkZero::ShaderAttachments	typeref:typename:std::tuple<Attachments...>
Options	include/VkZero/shader_bindings.hpp	/^  using Options = std::tuple<Bindings...>;$/;"	t	struct:VkZero::ShaderBindings	typeref:typename:std::tuple<Bindings...>
PVRTC12BppSrgbBlockImg	include/VkZero/types.hpp	/^        PVRTC12BppSrgbBlockImg = 1000054004,$/;"	e	enum:VkZero::Format
PVRTC12BppUnormBlockImg	include/VkZero/types.hpp	/^        PVRTC12BppUnormBlockImg = 1000054000,$/;"	e	enum:VkZero::Format
PVRTC14BppSrgbBlockImg	include/VkZero/types.hpp	/^        PVRTC14BppSrgbBlockImg = 1000054005,$/;"	e	enum:VkZero::Format
PVRTC14BppUnormBlockImg	include/VkZero/types.hpp	/^        PVRTC14BppUnormBlockImg = 1000054001,$/;"	e	enum:VkZero::Format
PVRTC22BppSrgbBlockImg	include/VkZero/types.hpp	/^        PVRTC22BppSrgbBlockImg = 1000054006,$/;"	e	enum:VkZero::Format
PVRTC22BppUnormBlockImg	include/VkZero/types.hpp	/^        PVRTC22BppUnormBlockImg = 1000054002,$/;"	e	enum:VkZero::Format
PVRTC24BppSrgbBlockImg	include/VkZero/types.hpp	/^        PVRTC24BppSrgbBlockImg = 1000054007,$/;"	e	enum:VkZero::Format
PVRTC24BppUnormBlockImg	include/VkZero/types.hpp	/^        PVRTC24BppUnormBlockImg = 1000054003,$/;"	e	enum:VkZero::Format
PingPong	include/FastNoiseLite.hpp	/^  static float PingPong(float t) {$/;"	f	class:FastNoiseLite	typeref:typename:float
Pipeline	include/PipelineManager.hpp	/^  using Pipeline = VkZero::GraphicsPipeline<PipelineShaderGroup, PipelineShaderResources>;$/;"	t	class:PipelineManager	typeref:typename:VkZero::GraphicsPipeline<PipelineShaderGroup,PipelineShaderResources>
Pipeline	include/Raytracer.hpp	/^  using Pipeline = VkZero::RaytracingPipeline<RaytracingShaderGroup, RaytracingResourceSet>;$/;"	t	class:Raytracer	typeref:typename:VkZero::RaytracingPipeline<RaytracingShaderGroup,RaytracingResourceSet>
Pipeline	include/VkZeroObjects.hpp	/^  using Pipeline = VkZero::GraphicsPipeline<PipelineShaderGroup, PipelineShaderResources>;$/;"	t	class:VkZeroObjects	typeref:typename:VkZero::GraphicsPipeline<PipelineShaderGroup,PipelineShaderResources>
PipelineDetails	include/VkZero/graphics_pipeline.hpp	/^namespace PipelineDetails {$/;"	n	namespace:VkZero
PipelineManager	include/PipelineManager.hpp	/^class PipelineManager {$/;"	c
PipelineManager	src/PipelineManager.cpp	/^PipelineManager::PipelineManager(std::unique_ptr<Raytracer> &raytracer,$/;"	f	class:PipelineManager
PipelineRenderPass	include/PipelineManager.hpp	/^  using PipelineRenderPass = VkZero::GraphicsRenderpass<PipelineRenderPassResources, Pipeline>;$/;"	t	class:PipelineManager	typeref:typename:VkZero::GraphicsRenderpass<PipelineRenderPassResources,Pipeline>
PipelineRenderPass	include/VkZeroObjects.hpp	/^  using PipelineRenderPass = VkZero::GraphicsRenderpass<PipelineRenderPassResources, Pipeline>;$/;"	t	class:VkZeroObjects	typeref:typename:VkZero::GraphicsRenderpass<PipelineRenderPassResources,Pipeline>
PipelineRenderPassResources	include/PipelineManager.hpp	/^  using PipelineRenderPassResources = VkZero::RenderPassResourceSet<VkZero::RenderPassResource<"/;"	t	class:PipelineManager	typeref:typename:VkZero::RenderPassResourceSet<VkZero::RenderPassResource<"output">>
PipelineRenderPassResources	include/VkZeroObjects.hpp	/^  using PipelineRenderPassResources = VkZero::RenderPassResourceSet<VkZero::RenderPassResource<"/;"	t	class:VkZeroObjects	typeref:typename:VkZero::RenderPassResourceSet<VkZero::RenderPassResource<"output">>
PipelineShaderGroup	include/PipelineManager.hpp	/^  using PipelineShaderGroup = VkZero::ShaderGroup<PipelineShaderPushConstant, main_vert, main_fr/;"	t	class:PipelineManager	typeref:typename:VkZero::ShaderGroup<PipelineShaderPushConstant,main_vert,main_frag>
PipelineShaderGroup	include/VkZeroObjects.hpp	/^  using PipelineShaderGroup = VkZero::ShaderGroup<PipelineShaderPushConstant, main_vert, main_fr/;"	t	class:VkZeroObjects	typeref:typename:VkZero::ShaderGroup<PipelineShaderPushConstant,main_vert,main_frag>
PipelineShaderPushConstant	include/PipelineManager.hpp	/^  using PipelineShaderPushConstant = VkZero::ShaderPushConstants<>;$/;"	t	class:PipelineManager	typeref:typename:VkZero::ShaderPushConstants<>
PipelineShaderPushConstant	include/VkZeroObjects.hpp	/^  using PipelineShaderPushConstant = VkZero::ShaderPushConstants<>;$/;"	t	class:VkZeroObjects	typeref:typename:VkZero::ShaderPushConstants<>
PipelineShaderResources	include/PipelineManager.hpp	/^  using PipelineShaderResources = VkZero::ShaderResourceSet<VkZero::ResourceBinding<VkZero::Swap/;"	t	class:PipelineManager	typeref:typename:VkZero::ShaderResourceSet<VkZero::ResourceBinding<VkZero::SwapImage,VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,VkZero::SHADER_FRAGMENT,0,1>>
PipelineShaderResources	include/VkZeroObjects.hpp	/^  using PipelineShaderResources = VkZero::ShaderResourceSet<VkZero::ResourceBinding<VkZero::Swap/;"	t	class:VkZeroObjects	typeref:typename:VkZero::ShaderResourceSet<VkZero::ResourceBinding<VkZero::SwapImage,VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,VkZero::SHADER_FRAGMENT,0,1>>
Preinitialized	include/VkZero/types.hpp	/^        Preinitialized = 8,$/;"	e	enum:VkZero::ImageLayout
PresentSrc	include/VkZero/types.hpp	/^        PresentSrc = 1000001002,$/;"	e	enum:VkZero::ImageLayout
PreserveAttachment	include/VkZero/render_pass.hpp	/^  PreserveAttachment() : AttachmentBase(name.value) {}$/;"	f	struct:VkZero::PreserveAttachment
PreserveAttachment	include/VkZero/render_pass.hpp	/^template <FixedString Name> struct PreserveAttachment : public AttachmentBase {$/;"	s	namespace:VkZero
PrimeX	include/FastNoiseLite.hpp	/^  static const int PrimeX = 501125321;$/;"	m	class:FastNoiseLite	typeref:typename:const int
PrimeY	include/FastNoiseLite.hpp	/^  static const int PrimeY = 1136930381;$/;"	m	class:FastNoiseLite	typeref:typename:const int
PrimeZ	include/FastNoiseLite.hpp	/^  static const int PrimeZ = 1720413743;$/;"	m	class:FastNoiseLite	typeref:typename:const int
Project Structure	README.md	/^## Project Structure$/;"	s	chapter:VoxelEngine
PushConstant	include/VkZero/shader_group.hpp	/^template <typename T, int ShaderStages> struct PushConstant {$/;"	s	namespace:VkZero
PushConstantData	include/VkZero/render_pass.hpp	/^  PushConstantData() : PushConstantDataBase((sizeof(Structures) + ...)) {}$/;"	f	struct:VkZero::PushConstantData
PushConstantData	include/VkZero/render_pass.hpp	/^template <typename... Structures> struct PushConstantData : public PushConstantDataBase {$/;"	s	namespace:VkZero
PushConstantDataBase	include/VkZero/render_pass.hpp	/^struct PushConstantDataBase {$/;"	s	namespace:VkZero
PushConstantDataBase	src/VkZero/graphics_renderpass.cpp	/^PushConstantDataBase::PushConstantDataBase(size_t size) {$/;"	f	class:PushConstantDataBase
PushConstantDataImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  PushConstantDataImpl_T(size_t size)$/;"	f	struct:VkZero::PushConstantDataImpl_T
PushConstantDataImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^struct PushConstantDataImpl_T {$/;"	s	namespace:VkZero
PushConstantType	include/VkZero/shader.hpp	/^        using PushConstantType = ShaderDetails::push_constant_extractor<std::tuple<ShaderOptions/;"	t	class:VkZero::Shader	typeref:typename:ShaderDetails::push_constant_extractor<std::tuple<ShaderOptions...>>::type::Options
QueueFamilyIndices	include/VkZero/Internal/core_internal.hpp	/^  struct QueueFamilyIndices {$/;"	s	namespace:VkZero
QueueFamilyIndices	include/VkZero/context.hpp	/^  struct QueueFamilyIndices {$/;"	s	namespace:VkZero
R10X6G10X6B10X6A10X6Unorm4Pack16	include/VkZero/types.hpp	/^        R10X6G10X6B10X6A10X6Unorm4Pack16 = 1000156009,$/;"	e	enum:VkZero::Format
R10X6G10X6Unorm2Pack16	include/VkZero/types.hpp	/^        R10X6G10X6Unorm2Pack16 = 1000156008,$/;"	e	enum:VkZero::Format
R10X6UnormPack16	include/VkZero/types.hpp	/^        R10X6UnormPack16 = 1000156007,$/;"	e	enum:VkZero::Format
R12X4G12X4B12X4A12X4Unorm4Pack16	include/VkZero/types.hpp	/^        R12X4G12X4B12X4A12X4Unorm4Pack16 = 1000156019,$/;"	e	enum:VkZero::Format
R12X4G12X4Unorm2Pack16	include/VkZero/types.hpp	/^        R12X4G12X4Unorm2Pack16 = 1000156018,$/;"	e	enum:VkZero::Format
R12X4UnormPack16	include/VkZero/types.hpp	/^        R12X4UnormPack16 = 1000156017,$/;"	e	enum:VkZero::Format
R16G16B16A16Sfloat	include/VkZero/types.hpp	/^        R16G16B16A16Sfloat = 97,$/;"	e	enum:VkZero::Format
R16G16B16A16Sint	include/VkZero/types.hpp	/^        R16G16B16A16Sint = 96,$/;"	e	enum:VkZero::Format
R16G16B16A16Snorm	include/VkZero/types.hpp	/^        R16G16B16A16Snorm = 92,$/;"	e	enum:VkZero::Format
R16G16B16A16Sscaled	include/VkZero/types.hpp	/^        R16G16B16A16Sscaled = 94,$/;"	e	enum:VkZero::Format
R16G16B16A16Uint	include/VkZero/types.hpp	/^        R16G16B16A16Uint = 95,$/;"	e	enum:VkZero::Format
R16G16B16A16Unorm	include/VkZero/types.hpp	/^        R16G16B16A16Unorm = 91,$/;"	e	enum:VkZero::Format
R16G16B16A16Uscaled	include/VkZero/types.hpp	/^        R16G16B16A16Uscaled = 93,$/;"	e	enum:VkZero::Format
R16G16B16Sfloat	include/VkZero/types.hpp	/^        R16G16B16Sfloat = 90,$/;"	e	enum:VkZero::Format
R16G16B16Sint	include/VkZero/types.hpp	/^        R16G16B16Sint = 89,$/;"	e	enum:VkZero::Format
R16G16B16Snorm	include/VkZero/types.hpp	/^        R16G16B16Snorm = 85,$/;"	e	enum:VkZero::Format
R16G16B16Sscaled	include/VkZero/types.hpp	/^        R16G16B16Sscaled = 87,$/;"	e	enum:VkZero::Format
R16G16B16Uint	include/VkZero/types.hpp	/^        R16G16B16Uint = 88,$/;"	e	enum:VkZero::Format
R16G16B16Unorm	include/VkZero/types.hpp	/^        R16G16B16Unorm = 84,$/;"	e	enum:VkZero::Format
R16G16B16Uscaled	include/VkZero/types.hpp	/^        R16G16B16Uscaled = 86,$/;"	e	enum:VkZero::Format
R16G16Sfixed5NV	include/VkZero/types.hpp	/^        R16G16Sfixed5NV = 1000464000$/;"	e	enum:VkZero::Format
R16G16Sfloat	include/VkZero/types.hpp	/^        R16G16Sfloat = 83,$/;"	e	enum:VkZero::Format
R16G16Sint	include/VkZero/types.hpp	/^        R16G16Sint = 82,$/;"	e	enum:VkZero::Format
R16G16Snorm	include/VkZero/types.hpp	/^        R16G16Snorm = 78,$/;"	e	enum:VkZero::Format
R16G16Sscaled	include/VkZero/types.hpp	/^        R16G16Sscaled = 80,$/;"	e	enum:VkZero::Format
R16G16Uint	include/VkZero/types.hpp	/^        R16G16Uint = 81,$/;"	e	enum:VkZero::Format
R16G16Unorm	include/VkZero/types.hpp	/^        R16G16Unorm = 77,$/;"	e	enum:VkZero::Format
R16G16Uscaled	include/VkZero/types.hpp	/^        R16G16Uscaled = 79,$/;"	e	enum:VkZero::Format
R16Sfloat	include/VkZero/types.hpp	/^        R16Sfloat = 76,$/;"	e	enum:VkZero::Format
R16Sint	include/VkZero/types.hpp	/^        R16Sint = 75,$/;"	e	enum:VkZero::Format
R16Snorm	include/VkZero/types.hpp	/^        R16Snorm = 71,$/;"	e	enum:VkZero::Format
R16Sscaled	include/VkZero/types.hpp	/^        R16Sscaled = 73,$/;"	e	enum:VkZero::Format
R16Uint	include/VkZero/types.hpp	/^        R16Uint = 74,$/;"	e	enum:VkZero::Format
R16Unorm	include/VkZero/types.hpp	/^        R16Unorm = 70,$/;"	e	enum:VkZero::Format
R16Uscaled	include/VkZero/types.hpp	/^        R16Uscaled = 72,$/;"	e	enum:VkZero::Format
R32G32B32A32Sfloat	include/VkZero/types.hpp	/^        R32G32B32A32Sfloat = 109,$/;"	e	enum:VkZero::Format
R32G32B32A32Sint	include/VkZero/types.hpp	/^        R32G32B32A32Sint = 108,$/;"	e	enum:VkZero::Format
R32G32B32A32Uint	include/VkZero/types.hpp	/^        R32G32B32A32Uint = 107,$/;"	e	enum:VkZero::Format
R32G32B32Sfloat	include/VkZero/types.hpp	/^        R32G32B32Sfloat = 106,$/;"	e	enum:VkZero::Format
R32G32B32Sint	include/VkZero/types.hpp	/^        R32G32B32Sint = 105,$/;"	e	enum:VkZero::Format
R32G32B32Uint	include/VkZero/types.hpp	/^        R32G32B32Uint = 104,$/;"	e	enum:VkZero::Format
R32G32Sfloat	include/VkZero/types.hpp	/^        R32G32Sfloat = 103,$/;"	e	enum:VkZero::Format
R32G32Sint	include/VkZero/types.hpp	/^        R32G32Sint = 102,$/;"	e	enum:VkZero::Format
R32G32Uint	include/VkZero/types.hpp	/^        R32G32Uint = 101,$/;"	e	enum:VkZero::Format
R32Sfloat	include/VkZero/types.hpp	/^        R32Sfloat = 100,$/;"	e	enum:VkZero::Format
R32Sint	include/VkZero/types.hpp	/^        R32Sint = 99,$/;"	e	enum:VkZero::Format
R32Uint	include/VkZero/types.hpp	/^        R32Uint = 98,$/;"	e	enum:VkZero::Format
R4G4B4A4UnormPack16	include/VkZero/types.hpp	/^        R4G4B4A4UnormPack16 = 2,$/;"	e	enum:VkZero::Format
R4G4UnormPack8	include/VkZero/types.hpp	/^        R4G4UnormPack8 = 1,$/;"	e	enum:VkZero::Format
R5G5B5A1UnormPack16	include/VkZero/types.hpp	/^        R5G5B5A1UnormPack16 = 6,$/;"	e	enum:VkZero::Format
R5G6B5UnormPack16	include/VkZero/types.hpp	/^        R5G6B5UnormPack16 = 4,$/;"	e	enum:VkZero::Format
R64G64B64A64Sfloat	include/VkZero/types.hpp	/^        R64G64B64A64Sfloat = 121,$/;"	e	enum:VkZero::Format
R64G64B64A64Sint	include/VkZero/types.hpp	/^        R64G64B64A64Sint = 120,$/;"	e	enum:VkZero::Format
R64G64B64A64Uint	include/VkZero/types.hpp	/^        R64G64B64A64Uint = 119,$/;"	e	enum:VkZero::Format
R64G64B64Sfloat	include/VkZero/types.hpp	/^        R64G64B64Sfloat = 118,$/;"	e	enum:VkZero::Format
R64G64B64Sint	include/VkZero/types.hpp	/^        R64G64B64Sint = 117,$/;"	e	enum:VkZero::Format
R64G64B64Uint	include/VkZero/types.hpp	/^        R64G64B64Uint = 116,$/;"	e	enum:VkZero::Format
R64G64Sfloat	include/VkZero/types.hpp	/^        R64G64Sfloat = 115,$/;"	e	enum:VkZero::Format
R64G64Sint	include/VkZero/types.hpp	/^        R64G64Sint = 114,$/;"	e	enum:VkZero::Format
R64G64Uint	include/VkZero/types.hpp	/^        R64G64Uint = 113,$/;"	e	enum:VkZero::Format
R64Sfloat	include/VkZero/types.hpp	/^        R64Sfloat = 112,$/;"	e	enum:VkZero::Format
R64Sint	include/VkZero/types.hpp	/^        R64Sint = 111,$/;"	e	enum:VkZero::Format
R64Uint	include/VkZero/types.hpp	/^        R64Uint = 110,$/;"	e	enum:VkZero::Format
R8G8B8A8Sint	include/VkZero/types.hpp	/^        R8G8B8A8Sint = 42,$/;"	e	enum:VkZero::Format
R8G8B8A8Snorm	include/VkZero/types.hpp	/^        R8G8B8A8Snorm = 38,$/;"	e	enum:VkZero::Format
R8G8B8A8Srgb	include/VkZero/types.hpp	/^        R8G8B8A8Srgb = 43,$/;"	e	enum:VkZero::Format
R8G8B8A8Sscaled	include/VkZero/types.hpp	/^        R8G8B8A8Sscaled = 40,$/;"	e	enum:VkZero::Format
R8G8B8A8Uint	include/VkZero/types.hpp	/^        R8G8B8A8Uint = 41,$/;"	e	enum:VkZero::Format
R8G8B8A8Unorm	include/VkZero/types.hpp	/^        R8G8B8A8Unorm = 37,$/;"	e	enum:VkZero::Format
R8G8B8A8Uscaled	include/VkZero/types.hpp	/^        R8G8B8A8Uscaled = 39,$/;"	e	enum:VkZero::Format
R8G8B8Sint	include/VkZero/types.hpp	/^        R8G8B8Sint = 28,$/;"	e	enum:VkZero::Format
R8G8B8Snorm	include/VkZero/types.hpp	/^        R8G8B8Snorm = 24,$/;"	e	enum:VkZero::Format
R8G8B8Srgb	include/VkZero/types.hpp	/^        R8G8B8Srgb = 29,$/;"	e	enum:VkZero::Format
R8G8B8Sscaled	include/VkZero/types.hpp	/^        R8G8B8Sscaled = 26,$/;"	e	enum:VkZero::Format
R8G8B8Uint	include/VkZero/types.hpp	/^        R8G8B8Uint = 27,$/;"	e	enum:VkZero::Format
R8G8B8Unorm	include/VkZero/types.hpp	/^        R8G8B8Unorm = 23,$/;"	e	enum:VkZero::Format
R8G8B8Uscaled	include/VkZero/types.hpp	/^        R8G8B8Uscaled = 25,$/;"	e	enum:VkZero::Format
R8G8Sint	include/VkZero/types.hpp	/^        R8G8Sint = 21,$/;"	e	enum:VkZero::Format
R8G8Snorm	include/VkZero/types.hpp	/^        R8G8Snorm = 17,$/;"	e	enum:VkZero::Format
R8G8Srgb	include/VkZero/types.hpp	/^        R8G8Srgb = 22,$/;"	e	enum:VkZero::Format
R8G8Sscaled	include/VkZero/types.hpp	/^        R8G8Sscaled = 19,$/;"	e	enum:VkZero::Format
R8G8Uint	include/VkZero/types.hpp	/^        R8G8Uint = 20,$/;"	e	enum:VkZero::Format
R8G8Unorm	include/VkZero/types.hpp	/^        R8G8Unorm = 16,$/;"	e	enum:VkZero::Format
R8G8Uscaled	include/VkZero/types.hpp	/^        R8G8Uscaled = 18,$/;"	e	enum:VkZero::Format
R8Sint	include/VkZero/types.hpp	/^        R8Sint = 14,$/;"	e	enum:VkZero::Format
R8Snorm	include/VkZero/types.hpp	/^        R8Snorm = 10,$/;"	e	enum:VkZero::Format
R8Srgb	include/VkZero/types.hpp	/^        R8Srgb = 15,$/;"	e	enum:VkZero::Format
R8Sscaled	include/VkZero/types.hpp	/^        R8Sscaled = 12,$/;"	e	enum:VkZero::Format
R8Uint	include/VkZero/types.hpp	/^        R8Uint = 13,$/;"	e	enum:VkZero::Format
R8Unorm	include/VkZero/types.hpp	/^        R8Unorm = 9,$/;"	e	enum:VkZero::Format
R8Uscaled	include/VkZero/types.hpp	/^        R8Uscaled = 11,$/;"	e	enum:VkZero::Format
RAYTRACE_HEIGHT	include/Engine.hpp	/^#define RAYTRACE_HEIGHT /;"	d
RAYTRACE_HEIGHT	include/Raytracer.hpp	/^#define RAYTRACE_HEIGHT /;"	d
RAYTRACE_HEIGHT	include/VkZero/render_pass.hpp	/^#define RAYTRACE_HEIGHT /;"	d
RAYTRACE_HEIGHT	include/VkZeroObjects.hpp	/^#define RAYTRACE_HEIGHT /;"	d
RAYTRACE_HEIGHT	src/Raytracer.cpp	/^#define RAYTRACE_HEIGHT /;"	d	file:
RAYTRACE_HEIGHT	src/VkZeroObjects.cpp	/^#define RAYTRACE_HEIGHT /;"	d	file:
RAYTRACE_WIDTH	include/Engine.hpp	/^#define RAYTRACE_WIDTH /;"	d
RAYTRACE_WIDTH	include/Raytracer.hpp	/^#define RAYTRACE_WIDTH /;"	d
RAYTRACE_WIDTH	include/VkZero/render_pass.hpp	/^#define RAYTRACE_WIDTH /;"	d
RAYTRACE_WIDTH	include/VkZeroObjects.hpp	/^#define RAYTRACE_WIDTH /;"	d
RAYTRACE_WIDTH	src/Raytracer.cpp	/^#define RAYTRACE_WIDTH /;"	d	file:
RAYTRACE_WIDTH	src/VkZeroObjects.cpp	/^#define RAYTRACE_WIDTH /;"	d	file:
RandVecs2D	include/FastNoiseLite.hpp	/^    static const T RandVecs2D[];$/;"	m	struct:FastNoiseLite::Lookup	typeref:typename:const T[]
RandVecs2D	include/FastNoiseLite.hpp	/^const T FastNoiseLite::Lookup<T>::RandVecs2D[] = {$/;"	m	class:FastNoiseLite::Lookup<T>	typeref:typename:const T[]
RandVecs3D	include/FastNoiseLite.hpp	/^    static const T RandVecs3D[];$/;"	m	struct:FastNoiseLite::Lookup	typeref:typename:const T[]
RandVecs3D	include/FastNoiseLite.hpp	/^const T FastNoiseLite::Lookup<T>::RandVecs3D[] = {$/;"	m	class:FastNoiseLite::Lookup<T>	typeref:typename:const T[]
Raytracer	include/Raytracer.hpp	/^class Raytracer {$/;"	c
Raytracer	src/Raytracer.cpp	/^Raytracer::Raytracer(std::unique_ptr<CommandManager> &commandManager,$/;"	f	class:Raytracer
RaytracingPipeline	include/VkZero/raytracing_pipeline.hpp	/^  RaytracingPipeline(uint32_t width, uint32_t height, ShaderGroup &shaderGroup,$/;"	f	class:VkZero::RaytracingPipeline
RaytracingPipeline	include/VkZero/raytracing_pipeline.hpp	/^class RaytracingPipeline : public RaytracingPipelineBase {$/;"	c	namespace:VkZero
RaytracingPipeline	include/VkZeroObjects.hpp	/^  using RaytracingPipeline = VkZero::RaytracingPipeline<RaytracingShaderGroup, RaytracingResourc/;"	t	class:VkZeroObjects	typeref:typename:VkZero::RaytracingPipeline<RaytracingShaderGroup,RaytracingResourceSet>
RaytracingPipelineBase	include/VkZero/raytracing_pipeline.hpp	/^struct RaytracingPipelineBase {$/;"	s	namespace:VkZero
RaytracingPipelineBase	src/VkZero/raytracing_pipeline.cpp	/^RaytracingPipelineBase::RaytracingPipelineBase(uint32_t width, uint32_t height,$/;"	f	class:RaytracingPipelineBase
RaytracingPipelineImpl_T	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^struct RaytracingPipelineImpl_T {$/;"	s	namespace:VkZero
RaytracingPipelineImpl_T	src/VkZero/raytracing_pipeline.cpp	/^RaytracingPipelineImpl_T::RaytracingPipelineImpl_T(uint32_t width, uint32_t height,$/;"	f	class:RaytracingPipelineImpl_T
RaytracingPushConstant	include/shaders.hpp	/^struct RaytracingPushConstant {$/;"	s
RaytracingPushConstantData	include/Raytracer.hpp	/^  using RaytracingPushConstantData = VkZero::PushConstantData<RaytracingPushConstant>;$/;"	t	class:Raytracer	typeref:typename:VkZero::PushConstantData<RaytracingPushConstant>
RaytracingPushConstantData	include/VkZeroObjects.hpp	/^  using RaytracingPushConstantData = VkZero::PushConstantData<RaytracingPushConstant>;$/;"	t	class:VkZeroObjects	typeref:typename:VkZero::PushConstantData<RaytracingPushConstant>
RaytracingPushConstants	include/Raytracer.hpp	/^  using RaytracingPushConstants = VkZero::ShaderPushConstants<VkZero::PushConstant<RaytracingPus/;"	t	class:Raytracer	typeref:typename:VkZero::ShaderPushConstants<VkZero::PushConstant<RaytracingPushConstant,VkZero::SHADER_RGEN>>
RaytracingPushConstants	include/VkZeroObjects.hpp	/^  using RaytracingPushConstants = VkZero::ShaderPushConstants<VkZero::PushConstant<RaytracingPus/;"	t	class:VkZeroObjects	typeref:typename:VkZero::ShaderPushConstants<VkZero::PushConstant<RaytracingPushConstant,VkZero::SHADER_RGEN>>
RaytracingRenderPass	include/VkZero/render_pass.hpp	/^  RaytracingRenderPass(std::function<void(VkCommandBuffer, uint32_t)> before, RaytracingPipeline/;"	f	class:VkZero::RaytracingRenderPass
RaytracingRenderPass	include/VkZero/render_pass.hpp	/^class RaytracingRenderPass : public RaytracingRenderpassBase {$/;"	c	namespace:VkZero
RaytracingRenderPassPipeline	include/VkZero/render_pass.hpp	/^  RaytracingRenderPassPipeline(Pipeline &pipeline, PushConstant &pushConstants)$/;"	f	struct:VkZero::RaytracingRenderPassPipeline
RaytracingRenderPassPipeline	include/VkZero/render_pass.hpp	/^struct RaytracingRenderPassPipeline {$/;"	s	namespace:VkZero
RaytracingRenderPass_t	include/Raytracer.hpp	/^  using RaytracingRenderPass_t = VkZero::RaytracingRenderPass<VkZero::RaytracingRenderPassPipeli/;"	t	class:Raytracer	typeref:typename:VkZero::RaytracingRenderPass<VkZero::RaytracingRenderPassPipeline<RaytracingPushConstantData,Pipeline>>
RaytracingRenderPass_t	include/VkZeroObjects.hpp	/^  using RaytracingRenderPass_t = VkZero::RaytracingRenderPass<VkZero::RaytracingRenderPassPipeli/;"	t	class:VkZeroObjects	typeref:typename:VkZero::RaytracingRenderPass<VkZero::RaytracingRenderPassPipeline<RaytracingPushConstantData,RaytracingPipeline>>
RaytracingRenderpassBase	include/VkZero/render_pass.hpp	/^struct RaytracingRenderpassBase {$/;"	s	namespace:VkZero
RaytracingRenderpassBase	src/VkZero/raytracing_renderpass.cpp	/^RaytracingRenderpassBase::RaytracingRenderpassBase($/;"	f	class:RaytracingRenderpassBase
RaytracingRenderpassImpl_T	include/VkZero/Internal/raytracing_renderpass_internal.hpp	/^struct RaytracingRenderpassImpl_T : public RenderpassImpl_T{$/;"	s	namespace:VkZero
RaytracingRenderpassImpl_T	src/VkZero/raytracing_renderpass.cpp	/^RaytracingRenderpassImpl_T::RaytracingRenderpassImpl_T($/;"	f	class:RaytracingRenderpassImpl_T
RaytracingResourceSet	include/Raytracer.hpp	/^  using RaytracingResourceSet = VkZero::ShaderResourceSet<$/;"	t	class:Raytracer
RaytracingResourceSet	include/VkZeroObjects.hpp	/^  using RaytracingResourceSet = VkZero::ShaderResourceSet<$/;"	t	class:VkZeroObjects
RaytracingShaderGroup	include/Raytracer.hpp	/^  using RaytracingShaderGroup = VkZero::ShaderGroup<RaytracingPushConstants, main_rmiss, main_rg/;"	t	class:Raytracer	typeref:typename:VkZero::ShaderGroup<RaytracingPushConstants,main_rmiss,main_rgen>
RaytracingShaderGroup	include/VkZeroObjects.hpp	/^  using RaytracingShaderGroup = VkZero::ShaderGroup<RaytracingPushConstants, main_rmiss, main_rg/;"	t	class:VkZeroObjects	typeref:typename:VkZero::ShaderGroup<RaytracingPushConstants,main_rmiss,main_rgen>
ReadOnlyOptimal	include/VkZero/types.hpp	/^        ReadOnlyOptimal = 1000314000,$/;"	e	enum:VkZero::ImageLayout
RenderPassDetails	include/VkZero/render_pass.hpp	/^namespace RenderPassDetails {$/;"	n	namespace:VkZero
RenderPassResource	include/VkZero/render_pass.hpp	/^  RenderPassResource(AttachmentImage *image)$/;"	f	class:VkZero::RenderPassResource
RenderPassResource	include/VkZero/render_pass.hpp	/^class RenderPassResource : public RenderPassResourceBase {$/;"	c	namespace:VkZero
RenderPassResourceBase	include/VkZero/render_pass.hpp	/^struct RenderPassResourceBase {$/;"	s	namespace:VkZero
RenderPassResourceBase	src/VkZero/graphics_renderpass.cpp	/^RenderPassResourceBase::RenderPassResourceBase(const char *name,$/;"	f	class:RenderPassResourceBase
RenderPassResourceImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  RenderPassResourceImpl_T(const char *name, AttachmentImage *image)$/;"	f	struct:VkZero::RenderPassResourceImpl_T
RenderPassResourceImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^struct RenderPassResourceImpl_T {$/;"	s	namespace:VkZero
RenderPassResourceSet	include/VkZero/render_pass.hpp	/^  RenderPassResourceSet(Resources... resources)$/;"	f	class:VkZero::RenderPassResourceSet
RenderPassResourceSet	include/VkZero/render_pass.hpp	/^class RenderPassResourceSet : public RenderPassResourceSetBase {$/;"	c	namespace:VkZero
RenderPassResourceSetBase	include/VkZero/render_pass.hpp	/^struct RenderPassResourceSetBase {$/;"	s	namespace:VkZero
RenderPassResourceSetBase	src/VkZero/graphics_renderpass.cpp	/^RenderPassResourceSetBase::RenderPassResourceSetBase($/;"	f	class:RenderPassResourceSetBase
RenderPassResourceSetDetails	include/VkZero/render_pass.hpp	/^namespace RenderPassResourceSetDetails {$/;"	n	namespace:VkZero
RenderPassResourceSetImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  RenderPassResourceSetImpl_T($/;"	f	struct:VkZero::RenderPassResourceSetImpl_T
RenderPassResourceSetImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^struct RenderPassResourceSetImpl_T {$/;"	s	namespace:VkZero
RenderingLocalRead	include/VkZero/types.hpp	/^        RenderingLocalRead = 1000232000,$/;"	e	enum:VkZero::ImageLayout
RenderpassImpl_T	include/VkZero/Internal/renderpass_internal.hpp	/^struct RenderpassImpl_T$/;"	s	namespace:VkZero
ResourceBinding	include/VkZero/binding.hpp	/^  ResourceBinding(Resource *info)$/;"	f	struct:VkZero::ResourceBinding
ResourceBinding	include/VkZero/binding.hpp	/^struct ResourceBinding : public ResourceBindingBase {$/;"	s	namespace:VkZero
ResourceBindingBase	include/VkZero/binding.hpp	/^struct ResourceBindingBase {$/;"	s	namespace:VkZero
ResourceBindingBase	src/VkZero/binding.cpp	/^ResourceBindingBase::ResourceBindingBase(std::vector<BindResource *> resources,$/;"	f	class:ResourceBindingBase
ResourceBindingImpl_T	include/VkZero/Internal/binding_internal.hpp	/^struct ResourceBindingImpl_T {$/;"	s	namespace:VkZero
ResourceBindingImpl_T	src/VkZero/binding.cpp	/^ResourceBindingImpl_T::ResourceBindingImpl_T(std::vector<BindResource*> resources,$/;"	f	class:ResourceBindingImpl_T
ResourceManager	include/VkZero/resource_manager.hpp	/^  class ResourceManager {$/;"	c	namespace:VkZero
RotationType3D	include/FastNoiseLite.hpp	/^  enum RotationType3D {$/;"	g	class:FastNoiseLite
RotationType3D_ImproveXYPlanes	include/FastNoiseLite.hpp	/^    RotationType3D_ImproveXYPlanes,$/;"	e	enum:FastNoiseLite::RotationType3D
RotationType3D_ImproveXZPlanes	include/FastNoiseLite.hpp	/^    RotationType3D_ImproveXZPlanes$/;"	e	enum:FastNoiseLite::RotationType3D
RotationType3D_None	include/FastNoiseLite.hpp	/^    RotationType3D_None,$/;"	e	enum:FastNoiseLite::RotationType3D
Running	README.md	/^## Running$/;"	s	chapter:VoxelEngine
S8Uint	include/VkZero/types.hpp	/^        S8Uint = 127,$/;"	e	enum:VkZero::Format
SHADER_FRAGMENT	include/VkZero/shader_types.hpp	/^        SHADER_FRAGMENT = VK_SHADER_STAGE_FRAGMENT_BIT,$/;"	e	enum:VkZero::ShaderType
SHADER_GEOMETRY	include/VkZero/shader_types.hpp	/^        SHADER_GEOMETRY = VK_SHADER_STAGE_GEOMETRY_BIT,$/;"	e	enum:VkZero::ShaderType
SHADER_RGEN	include/VkZero/shader_types.hpp	/^        SHADER_RGEN = VK_SHADER_STAGE_RAYGEN_BIT_KHR,$/;"	e	enum:VkZero::ShaderType
SHADER_RMISS	include/VkZero/shader_types.hpp	/^        SHADER_RMISS = VK_SHADER_STAGE_MISS_BIT_KHR,$/;"	e	enum:VkZero::ShaderType
SHADER_VERTEX	include/VkZero/shader_types.hpp	/^        SHADER_VERTEX = VK_SHADER_STAGE_VERTEX_BIT,$/;"	e	enum:VkZero::ShaderType
SetCellularDistanceFunction	include/FastNoiseLite.hpp	/^  void SetCellularDistanceFunction($/;"	f	class:FastNoiseLite	typeref:typename:void
SetCellularJitter	include/FastNoiseLite.hpp	/^  void SetCellularJitter(float cellularJitter) {$/;"	f	class:FastNoiseLite	typeref:typename:void
SetCellularReturnType	include/FastNoiseLite.hpp	/^  void SetCellularReturnType(CellularReturnType cellularReturnType) {$/;"	f	class:FastNoiseLite	typeref:typename:void
SetDomainWarpAmp	include/FastNoiseLite.hpp	/^  void SetDomainWarpAmp(float domainWarpAmp) { mDomainWarpAmp = domainWarpAmp; }$/;"	f	class:FastNoiseLite	typeref:typename:void
SetDomainWarpType	include/FastNoiseLite.hpp	/^  void SetDomainWarpType(DomainWarpType domainWarpType) {$/;"	f	class:FastNoiseLite	typeref:typename:void
SetFractalGain	include/FastNoiseLite.hpp	/^  void SetFractalGain(float gain) {$/;"	f	class:FastNoiseLite	typeref:typename:void
SetFractalLacunarity	include/FastNoiseLite.hpp	/^  void SetFractalLacunarity(float lacunarity) { mLacunarity = lacunarity; }$/;"	f	class:FastNoiseLite	typeref:typename:void
SetFractalOctaves	include/FastNoiseLite.hpp	/^  void SetFractalOctaves(int octaves) {$/;"	f	class:FastNoiseLite	typeref:typename:void
SetFractalPingPongStrength	include/FastNoiseLite.hpp	/^  void SetFractalPingPongStrength(float pingPongStrength) {$/;"	f	class:FastNoiseLite	typeref:typename:void
SetFractalType	include/FastNoiseLite.hpp	/^  void SetFractalType(FractalType fractalType) { mFractalType = fractalType; }$/;"	f	class:FastNoiseLite	typeref:typename:void
SetFractalWeightedStrength	include/FastNoiseLite.hpp	/^  void SetFractalWeightedStrength(float weightedStrength) {$/;"	f	class:FastNoiseLite	typeref:typename:void
SetFrequency	include/FastNoiseLite.hpp	/^  void SetFrequency(float frequency) { mFrequency = frequency; }$/;"	f	class:FastNoiseLite	typeref:typename:void
SetNoiseType	include/FastNoiseLite.hpp	/^  void SetNoiseType(NoiseType noiseType) {$/;"	f	class:FastNoiseLite	typeref:typename:void
SetRotationType3D	include/FastNoiseLite.hpp	/^  void SetRotationType3D(RotationType3D rotationType3D) {$/;"	f	class:FastNoiseLite	typeref:typename:void
SetSeed	include/FastNoiseLite.hpp	/^  void SetSeed(int seed) { mSeed = seed; }$/;"	f	class:FastNoiseLite	typeref:typename:void
Shader	include/VkZero/shader.hpp	/^        Shader() : ShaderBase(std::string{path.value}, (VkShaderStageFlagBits)Type) {}$/;"	f	class:VkZero::Shader
Shader	include/VkZero/shader.hpp	/^    class Shader : public ShaderBase{$/;"	c	namespace:VkZero
ShaderAttachments	include/VkZero/shader_bindings.hpp	/^template <typename... Attachments> struct ShaderAttachments {$/;"	s	namespace:VkZero
ShaderBase	include/VkZero/shader.hpp	/^    class ShaderBase$/;"	c	namespace:VkZero
ShaderBase	src/VkZero/shader.cpp	/^ShaderBase::ShaderBase(std::string path, VkShaderStageFlagBits type)$/;"	f	class:ShaderBase
ShaderBinding	include/VkZero/binding.hpp	/^struct ShaderBinding {$/;"	s	namespace:VkZero
ShaderBindings	include/VkZero/shader_bindings.hpp	/^template <typename... Bindings> struct ShaderBindings {$/;"	s	namespace:VkZero
ShaderDetails	include/VkZero/shader.hpp	/^    namespace ShaderDetails$/;"	n	namespace:VkZero
ShaderGroup	include/VkZero/shader_group.hpp	/^    ShaderGroup(ShaderPushConstants &pushConstants, Shaders &...shaders)$/;"	f	class:VkZero::ShaderGroup
ShaderGroup	include/VkZero/shader_group.hpp	/^  class ShaderGroup : public ShaderGroupBase {$/;"	c	namespace:VkZero
ShaderGroupBase	include/VkZero/shader_group.hpp	/^struct ShaderGroupBase$/;"	s	namespace:VkZero
ShaderGroupBase	src/VkZero/shader_group.cpp	/^ShaderGroupBase::ShaderGroupBase($/;"	f	class:ShaderGroupBase
ShaderGroupDetails	include/VkZero/shader_group.hpp	/^namespace ShaderGroupDetails {$/;"	n	namespace:VkZero
ShaderGroupImpl	include/VkZero/Internal/shader_group_internal.hpp	/^struct ShaderGroupImpl {$/;"	s	namespace:VkZero
ShaderGroupImpl	src/VkZero/shader_group.cpp	/^ShaderGroupImpl::ShaderGroupImpl(std::vector<ShaderImpl_T *> shaders,$/;"	f	class:ShaderGroupImpl
ShaderImpl_T	include/VkZero/Internal/shader_internal.hpp	/^    struct ShaderImpl_T$/;"	s	namespace:VkZero
ShaderImpl_T	src/VkZero/shader.cpp	/^ShaderImpl_T::ShaderImpl_T(std::string path, VkShaderStageFlagBits type)$/;"	f	class:ShaderImpl_T
ShaderLibrary	include/VkZero/shader_library.hpp	/^        ShaderLibrary() : shaders(Shaders()...) {}$/;"	f	class:VkZero::ShaderLibrary
ShaderLibrary	include/VkZero/shader_library.hpp	/^    class ShaderLibrary {$/;"	c	namespace:VkZero
ShaderPushConstant	include/VkZero/shader_bindings.hpp	/^template <typename PushConstantType> struct ShaderPushConstant {$/;"	s	namespace:VkZero
ShaderPushConstantData	include/VkZero/shader_group.hpp	/^  ShaderPushConstantData(uint32_t size, uint32_t stages) : structureSize(size), shaderStages(sta/;"	f	struct:VkZero::ShaderPushConstantData
ShaderPushConstantData	include/VkZero/shader_group.hpp	/^struct ShaderPushConstantData {$/;"	s	namespace:VkZero
ShaderPushConstants	include/VkZero/shader_group.hpp	/^  ShaderPushConstants()$/;"	f	class:VkZero::ShaderPushConstants
ShaderPushConstants	include/VkZero/shader_group.hpp	/^class ShaderPushConstants : public ShaderPushConstantsBase {$/;"	c	namespace:VkZero
ShaderPushConstantsBase	include/VkZero/shader_group.hpp	/^struct ShaderPushConstantsBase {$/;"	s	namespace:VkZero
ShaderPushConstantsBase	src/VkZero/shader_group.cpp	/^ShaderPushConstantsBase::ShaderPushConstantsBase($/;"	f	class:ShaderPushConstantsBase
ShaderPushConstantsImpl_T	include/VkZero/Internal/shader_group_internal.hpp	/^struct ShaderPushConstantsImpl_T$/;"	s	namespace:VkZero
ShaderPushConstantsImpl_T	src/VkZero/shader_group.cpp	/^ShaderPushConstantsImpl_T::ShaderPushConstantsImpl_T($/;"	f	class:ShaderPushConstantsImpl_T
ShaderReadOnlyOptimal	include/VkZero/types.hpp	/^        ShaderReadOnlyOptimal = 5,$/;"	e	enum:VkZero::ImageLayout
ShaderResourceSet	include/VkZero/shader_resource_set.hpp	/^  ShaderResourceSet(Bindings &&...bindings)$/;"	f	class:VkZero::ShaderResourceSet
ShaderResourceSet	include/VkZero/shader_resource_set.hpp	/^class ShaderResourceSet : public ShaderResourceSetBase {$/;"	c	namespace:VkZero
ShaderResourceSetBase	include/VkZero/shader_resource_set.hpp	/^struct ShaderResourceSetBase {$/;"	s	namespace:VkZero
ShaderResourceSetBase	src/VkZero/shader_resource_set.cpp	/^ShaderResourceSetBase::ShaderResourceSetBase(std::vector<ResourceBindingImpl_T *> bindings) {$/;"	f	class:ShaderResourceSetBase
ShaderResourceSetDetails	include/VkZero/shader_resource_set.hpp	/^namespace ShaderResourceSetDetails {$/;"	n	namespace:VkZero
ShaderResourceSetImpl_T	include/VkZero/Internal/shader_resource_set_internal.hpp	/^struct ShaderResourceSetImpl_T {$/;"	s	namespace:VkZero
ShaderResourceSetImpl_T	src/VkZero/shader_resource_set.cpp	/^ShaderResourceSetImpl_T::ShaderResourceSetImpl_T($/;"	f	class:ShaderResourceSetImpl_T
ShaderType	include/VkZero/shader_types.hpp	/^    enum ShaderType$/;"	g	namespace:VkZero
SharedImage	include/VkZero/image.hpp	/^    using SharedImage = class ImageBase<1>;$/;"	t	namespace:VkZero	typeref:class:ImageBase<1>
SharedPresent	include/VkZero/types.hpp	/^        SharedPresent = 1000111000,$/;"	e	enum:VkZero::ImageLayout
SingleCellular	include/FastNoiseLite.hpp	/^  float SingleCellular(int seed, FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SingleCellular	include/FastNoiseLite.hpp	/^  float SingleCellular(int seed, FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SingleDomainWarpBasicGrid	include/FastNoiseLite.hpp	/^  void SingleDomainWarpBasicGrid(int seed, float warpAmp, float frequency,$/;"	f	class:FastNoiseLite	typeref:typename:void
SingleDomainWarpOpenSimplex2Gradient	include/FastNoiseLite.hpp	/^  void SingleDomainWarpOpenSimplex2Gradient(int seed, float warpAmp,$/;"	f	class:FastNoiseLite	typeref:typename:void
SingleDomainWarpSimplexGradient	include/FastNoiseLite.hpp	/^  void SingleDomainWarpSimplexGradient(int seed, float warpAmp, float frequency,$/;"	f	class:FastNoiseLite	typeref:typename:void
SingleOpenSimplex2	include/FastNoiseLite.hpp	/^  float SingleOpenSimplex2(int seed, FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SingleOpenSimplex2S	include/FastNoiseLite.hpp	/^  float SingleOpenSimplex2S(int seed, FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SingleOpenSimplex2S	include/FastNoiseLite.hpp	/^  float SingleOpenSimplex2S(int seed, FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SinglePerlin	include/FastNoiseLite.hpp	/^  float SinglePerlin(int seed, FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SinglePerlin	include/FastNoiseLite.hpp	/^  float SinglePerlin(int seed, FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SingleSimplex	include/FastNoiseLite.hpp	/^  float SingleSimplex(int seed, FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SingleValue	include/FastNoiseLite.hpp	/^  float SingleValue(int seed, FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SingleValue	include/FastNoiseLite.hpp	/^  float SingleValue(int seed, FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SingleValueCubic	include/FastNoiseLite.hpp	/^  float SingleValueCubic(int seed, FNfloat x, FNfloat y) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
SingleValueCubic	include/FastNoiseLite.hpp	/^  float SingleValueCubic(int seed, FNfloat x, FNfloat y, FNfloat z) const {$/;"	f	class:FastNoiseLite	typeref:typename:float
StagedAttachmentImage	include/VkZero/image.hpp	/^    using StagedAttachmentImage = class StagedImageBase<3>;$/;"	t	namespace:VkZero	typeref:class:StagedImageBase<3>
StagedImageBase	include/VkZero/image.hpp	/^        StagedImageBase(uint32_t width, uint32_t height, uint32_t depth,$/;"	f	class:VkZero::StagedImageBase
StagedImageBase	include/VkZero/image.hpp	/^    class StagedImageBase : public BindResource, Image$/;"	c	namespace:VkZero
StagedSharedImage	include/VkZero/image.hpp	/^    using StagedSharedImage = class StagedImageBase<1>;$/;"	t	namespace:VkZero	typeref:class:StagedImageBase<1>
StagedSwapImage	include/VkZero/image.hpp	/^    using StagedSwapImage = class StagedImageBase<2>;$/;"	t	namespace:VkZero	typeref:class:StagedImageBase<2>
StagingData	include/VkZero/image.hpp	/^        using StagingData = struct StagingData_T*;$/;"	t	class:VkZero::Image	typeref:struct:StagingData_T *
StagingData_T	include/VkZero/Internal/image_internal.hpp	/^    struct StagingData_T$/;"	s	namespace:VkZero
StencilAttachmentOptimal	include/VkZero/types.hpp	/^        StencilAttachmentOptimal = 1000241002,$/;"	e	enum:VkZero::ImageLayout
StencilReadOnlyOptimal	include/VkZero/types.hpp	/^        StencilReadOnlyOptimal = 1000241003,$/;"	e	enum:VkZero::ImageLayout
Structure	include/VkZero/shader_group.hpp	/^  using Structure = T;$/;"	t	struct:VkZero::PushConstant	typeref:typename:T
SwapChainSupportDetails	include/VkZero/Internal/image_internal.hpp	/^        struct SwapChainSupportDetails {$/;"	s	namespace:VkZero
SwapChainSupportDetails	include/VkZero/Internal/window_internal.hpp	/^  struct SwapChainSupportDetails {$/;"	s	struct:VkZero::WindowImpl_T
SwapImage	include/VkZero/image.hpp	/^    using SwapImage = class ImageBase<2>;$/;"	t	namespace:VkZero	typeref:class:ImageBase<2>
SyncManager	include/SyncManager.hpp	/^class SyncManager {$/;"	c
SyncManager	src/SyncManager.cpp	/^SyncManager::SyncManager() {$/;"	f	class:SyncManager
TERRAIN_AREA	src/VoxelWorld.cpp	/^#define TERRAIN_AREA /;"	d	file:
TERRAIN_SCALE	src/VoxelWorld.cpp	/^#define TERRAIN_SCALE /;"	d	file:
Tail	src/VkZero/descriptor_pool.cpp	/^    using Tail = typename unique_types<std::tuple<Rest...>>::type;$/;"	t	struct:unique_types	typeref:typename:unique_types<std::tuple<Rest...>>::type	file:
TransferDstOptimal	include/VkZero/types.hpp	/^        TransferDstOptimal = 7,$/;"	e	enum:VkZero::ImageLayout
TransferSrcOptimal	include/VkZero/types.hpp	/^        TransferSrcOptimal = 6,$/;"	e	enum:VkZero::ImageLayout
TransformDomainWarpCoordinate	include/FastNoiseLite.hpp	/^  void TransformDomainWarpCoordinate(FNfloat &x, FNfloat &y) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
TransformDomainWarpCoordinate	include/FastNoiseLite.hpp	/^  void TransformDomainWarpCoordinate(FNfloat &x, FNfloat &y, FNfloat &z) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
TransformNoiseCoordinate	include/FastNoiseLite.hpp	/^  void TransformNoiseCoordinate(FNfloat &x, FNfloat &y) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
TransformNoiseCoordinate	include/FastNoiseLite.hpp	/^  void TransformNoiseCoordinate(FNfloat &x, FNfloat &y, FNfloat &z) const {$/;"	f	class:FastNoiseLite	typeref:typename:void
TransformType3D	include/FastNoiseLite.hpp	/^  enum TransformType3D {$/;"	g	class:FastNoiseLite
TransformType3D_DefaultOpenSimplex2	include/FastNoiseLite.hpp	/^    TransformType3D_DefaultOpenSimplex2$/;"	e	enum:FastNoiseLite::TransformType3D
TransformType3D_ImproveXYPlanes	include/FastNoiseLite.hpp	/^    TransformType3D_ImproveXYPlanes,$/;"	e	enum:FastNoiseLite::TransformType3D
TransformType3D_ImproveXZPlanes	include/FastNoiseLite.hpp	/^    TransformType3D_ImproveXZPlanes,$/;"	e	enum:FastNoiseLite::TransformType3D
TransformType3D_None	include/FastNoiseLite.hpp	/^    TransformType3D_None,$/;"	e	enum:FastNoiseLite::TransformType3D
TransformUBO	include/Camera.hpp	/^struct TransformUBO {$/;"	s
Undefined	include/VkZero/types.hpp	/^        Undefined = 0,$/;"	e	enum:VkZero::Format
Undefined	include/VkZero/types.hpp	/^        Undefined = 0,$/;"	e	enum:VkZero::ImageLayout
UpdateTransformType3D	include/FastNoiseLite.hpp	/^  void UpdateTransformType3D() {$/;"	f	class:FastNoiseLite	typeref:typename:void
UpdateWarpTransformType3D	include/FastNoiseLite.hpp	/^  void UpdateWarpTransformType3D() {$/;"	f	class:FastNoiseLite	typeref:typename:void
ValCoord	include/FastNoiseLite.hpp	/^  static float ValCoord(int seed, int xPrimed, int yPrimed) {$/;"	f	class:FastNoiseLite	typeref:typename:float
ValCoord	include/FastNoiseLite.hpp	/^  static float ValCoord(int seed, int xPrimed, int yPrimed, int zPrimed) {$/;"	f	class:FastNoiseLite	typeref:typename:float
VideoDecodeDpb	include/VkZero/types.hpp	/^        VideoDecodeDpb = 1000024002,$/;"	e	enum:VkZero::ImageLayout
VideoDecodeDst	include/VkZero/types.hpp	/^        VideoDecodeDst = 1000024000,$/;"	e	enum:VkZero::ImageLayout
VideoDecodeSrc	include/VkZero/types.hpp	/^        VideoDecodeSrc = 1000024001,$/;"	e	enum:VkZero::ImageLayout
VideoEncodeDpb	include/VkZero/types.hpp	/^        VideoEncodeDpb = 1000299002,$/;"	e	enum:VkZero::ImageLayout
VideoEncodeDst	include/VkZero/types.hpp	/^        VideoEncodeDst = 1000299000,$/;"	e	enum:VkZero::ImageLayout
VideoEncodeQuantizationMap	include/VkZero/types.hpp	/^        VideoEncodeQuantizationMap = 1000553000$/;"	e	enum:VkZero::ImageLayout
VideoEncodeSrc	include/VkZero/types.hpp	/^        VideoEncodeSrc = 1000299001,$/;"	e	enum:VkZero::ImageLayout
VkZero	include/Camera.hpp	/^namespace VkZero$/;"	n
VkZero	include/CommandManager.hpp	/^namespace VkZero$/;"	n
VkZero	include/Engine.hpp	/^namespace VkZero {$/;"	n
VkZero	include/PipelineManager.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/Internal/binding_internal.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/Internal/core_internal.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/Internal/graphics_pipeline_internal.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/Internal/image_internal.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/Internal/raytracing_renderpass_internal.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/Internal/renderpass_internal.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/Internal/shader_group_internal.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/Internal/shader_internal.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/Internal/shader_resource_set_internal.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/Internal/window_internal.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/bind_resource.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/binding.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/context.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/descriptor_pool.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/fixed_string.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/frame.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/graphics_pipeline.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/image.hpp	/^namespace VkZero $/;"	n
VkZero	include/VkZero/raytracing_pipeline.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/render_pass.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/resource_manager.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/shader.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/shader_bindings.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/shader_group.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/shader_library.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/shader_resource_set.hpp	/^namespace VkZero {$/;"	n
VkZero	include/VkZero/shader_types.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/types.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZero/window.hpp	/^namespace VkZero$/;"	n
VkZero	include/VkZeroObjects.hpp	/^namespace VkZero{$/;"	n
VkZeroCoreImpl_T	include/VkZero/Internal/core_internal.hpp	/^  struct VkZeroCoreImpl_T$/;"	s	namespace:VkZero
VkZeroCoreImpl_T	include/VkZero/context.hpp	/^  struct VkZeroCoreImpl_T$/;"	s	namespace:VkZero
VkZeroCoreImpl_T	src/VkZero/core.cpp	/^VkZeroCoreImpl_T::VkZeroCoreImpl_T() $/;"	f	class:VkZeroCoreImpl_T
VkZeroObjects	include/VkZeroObjects.hpp	/^class VkZeroObjects {$/;"	c
VkZeroObjects	src/VkZeroObjects.cpp	/^VkZeroObjects::VkZeroObjects(std::unique_ptr<CommandManager> &commandManager,$/;"	f	class:VkZeroObjects
VoxelChunk	include/VoxelWorld.hpp	/^  struct VoxelChunk {$/;"	s	class:VoxelWorld
VoxelEngine	README.md	/^# VoxelEngine$/;"	c
VoxelEngine	include/Engine.hpp	/^class VoxelEngine {$/;"	c
VoxelWorld	include/VoxelWorld.hpp	/^class VoxelWorld {$/;"	c
VoxelWorld	src/VoxelWorld.cpp	/^VoxelWorld::VoxelWorld(std::unique_ptr<CommandManager> &commandManager) : $/;"	f	class:VoxelWorld
WIDTH	include/Engine.hpp	/^const uint32_t WIDTH = 1920;$/;"	v	typeref:typename:const uint32_t
Window	include/Engine.hpp	/^  static std::unique_ptr<VkZero::Window> Window;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<VkZero::Window>
Window	include/VkZero/window.hpp	/^  class Window {$/;"	c	namespace:VkZero
Window	src/Engine.cpp	/^std::unique_ptr<VkZero::Window> VoxelEngine::Window;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<VkZero::Window>
Window	src/VkZero/window.cpp	/^Window::Window(int width, int height, const char *title)$/;"	f	class:Window
WindowImpl	include/VkZero/window.hpp	/^  using WindowImpl = struct WindowImpl_T*;$/;"	t	namespace:VkZero	typeref:struct:WindowImpl_T *
WindowImpl_T	include/VkZero/Internal/window_internal.hpp	/^struct WindowImpl_T {$/;"	s	namespace:VkZero
WindowImpl_T	src/VkZero/window.cpp	/^WindowImpl_T::WindowImpl_T(int width, int height, const char *title) :$/;"	f	class:WindowImpl_T
Write	src/VkZero/image.cpp	/^void Image::Write(ImageData image, StagingData staging, char* data)$/;"	f	class:Image	typeref:typename:void
Write	src/VkZero/image.cpp	/^void Image::Write(VkCommandBuffer commandBuffer, ImageData image, StagingData staging, char* dat/;"	f	class:Image	typeref:typename:void
WriteDescriptor	src/VkZero/image.cpp	/^void Image::WriteDescriptor(VkDevice device, VkDescriptorSet descriptorSet, uint32_t binding, ui/;"	f	class:Image	typeref:typename:void
X8D24UnormPack32	include/VkZero/types.hpp	/^        X8D24UnormPack32 = 125,$/;"	e	enum:VkZero::Format
__anon03e5b0750102	src/VkZero/descriptor_pool.cpp	/^       ([&](VkDescriptorType type){$/;"	f	function:DescriptorPool::DescriptorPool	file:
__anon39fbc7830102	src/Engine.cpp	/^                                            voxelWorld, camera, Window, [&](VkCommandBuffer cb, /;"	f	function:VoxelEngine::initVulkan	file:
__anon518d7da30102	src/VoxelWorld.cpp	/^    workers.emplace_back([this] { chunkWorker(); });$/;"	f	function:VoxelWorld::startWorkers	file:
__anon518d7da30202	src/VoxelWorld.cpp	/^              [this](uint16_t a, uint16_t b) { return chunkSort(a, b); });$/;"	f	function:VoxelWorld::sortChunks	file:
__anon518d7da30302	src/VoxelWorld.cpp	/^      queueCond.wait(lock, [&] { return chunkQueue[0] != 0 || stopThreads; });$/;"	f	function:VoxelWorld::chunkWorker	file:
__anon5a70aeb50102	src/VkZero/window.cpp	/^  window([&](){$/;"	f	file:
__anon5a70aeb50202	src/VkZero/window.cpp	/^  surface([&](){$/;"	f	file:
__anon5a70aeb50302	src/VkZero/window.cpp	/^  swapChain([&](){$/;"	f	file:
__anon5a70aeb50402	src/VkZero/window.cpp	/^  swapchainImages([&](){$/;"	f	file:
__anon830707660102	src/VkZero/shader_resource_set.cpp	/^    : descriptorSetLayout([&]() {$/;"	f	file:
__anon830707660202	src/VkZero/shader_resource_set.cpp	/^      descriptorSets([&]() {$/;"	f	file:
__anon8519f9630102	src/VkZero/graphics_pipeline.cpp	/^      : m_shaderGroup(shaderGroup), resources(resources), pipelineLayout([&]() {$/;"	f	file:
__anon9e840b460102	src/VkZero/raytracing_pipeline.cpp	/^    : resources(resources), m_shaderGroup(shaderGroup), width(width), height(height), pipelineLa/;"	f	file:
__anona64332f60108	src/Camera.cpp	/^  struct {$/;"	s	function:Camera::update	file:
__anonabb63eb90102	include/VkZero/binding.hpp	/^            [&]() {$/;"	f	struct:VkZero::ResourceBinding	file:
__anonbe7cc5e90102	include/VkZero/shader_library.hpp	/^        static constexpr bool matches = []() {$/;"	f	struct:VkZero::shader_index	file:
__anond26a2fc00102	src/VkZero/shader_group.cpp	/^    m_shaders([&]() {$/;"	f	file:
activeChunks	include/VoxelWorld.hpp	/^  std::unordered_set<uint16_t> activeChunks;$/;"	m	class:VoxelWorld	typeref:typename:std::unordered_set<uint16_t>
after	include/VkZero/Internal/raytracing_renderpass_internal.hpp	/^  std::function<void(VkCommandBuffer, uint32_t)> after;$/;"	m	struct:VkZero::RaytracingRenderpassImpl_T	typeref:typename:std::function<void (VkCommandBuffer,uint32_t)>
all	Makefile	/^all:$/;"	t
allAttachments	include/VkZero/render_pass.hpp	/^  using allAttachments =$/;"	t	class:VkZero::GraphicsRenderpass	typeref:typename:RenderPassDetails::get_all_attachments<std::tuple<Pipelines...>>::value
all_bindings_tuple	include/VkZero/shader_group.hpp	/^  using all_bindings_tuple = decltype(std::tuple_cat($/;"	t	struct:VkZero::ShaderGroupDetails::shader_binding_validator
allocateCommandBuffers	src/CommandManager.cpp	/^void CommandManager::allocateCommandBuffers() {$/;"	f	class:CommandManager	typeref:typename:void
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:0
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:1
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:10
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:11
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:12
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:13
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:14
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:15
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:16
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:2
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:3
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:4
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:5
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:6
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:7
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:8
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:9
assign_global_locations	include/VkZero/render_pass.hpp	/^struct assign_global_locations<std::tuple<First, Rest...>, Start> {$/;"	s	namespace:VkZero::RenderPassDetails
attachment_collector	include/VkZero/shader_group.hpp	/^struct attachment_collector<std::tuple<First, Rest...>> {$/;"	s	namespace:VkZero::ShaderGroupDetails
attachments	include/VkZero/Internal/shader_group_internal.hpp	/^    std::vector<AttachmentImpl_T*> attachments;$/;"	m	struct:VkZero::ShaderGroupImpl	typeref:typename:std::vector<AttachmentImpl_T * >
attachments_extractor	include/VkZero/shader.hpp	/^        struct attachments_extractor<std::tuple<First, Rest...>> {$/;"	s	namespace:VkZero::ShaderDetails
before	include/VkZero/Internal/raytracing_renderpass_internal.hpp	/^  std::function<void(VkCommandBuffer, uint32_t)> before;$/;"	m	struct:VkZero::RaytracingRenderpassImpl_T	typeref:typename:std::function<void (VkCommandBuffer,uint32_t)>
beginSingleTimeCommands	src/CommandManager.cpp	/^VkCommandBuffer CommandManager::beginSingleTimeCommands() {$/;"	f	class:CommandManager	typeref:typename:VkCommandBuffer
bindResources	src/VkZero/graphics_pipeline.cpp	/^  void GraphicsPipelineImpl_T::bindResources(VkCommandBuffer commandBuffer, int currentFrame) {$/;"	f	class:GraphicsPipelineImpl_T	typeref:typename:void
bindResources	src/VkZero/raytracing_pipeline.cpp	/^void RaytracingPipelineImpl_T::bindResources(VkCommandBuffer commandBuffer,$/;"	f	class:RaytracingPipelineImpl_T	typeref:typename:void
binding	include/VkZero/Internal/binding_internal.hpp	/^  uint32_t binding;$/;"	m	struct:VkZero::ResourceBindingImpl_T	typeref:typename:uint32_t
binding	src/VkZero/binding.cpp	/^  uint32_t binding;$/;"	v	typeref:typename:uint32_t
binding_compatibility_checker	include/VkZero/shader_group.hpp	/^  template <typename A, typename B> struct binding_compatibility_checker {$/;"	s	struct:VkZero::ShaderGroupDetails::shader_binding_validator
bindings	include/VkZero/Internal/shader_resource_set_internal.hpp	/^  std::vector<ResourceBindingBase *> bindings;$/;"	m	struct:VkZero::ShaderResourceSetImpl_T	typeref:typename:std::vector<ResourceBindingBase * >
bindings_extractor	include/VkZero/shader.hpp	/^        struct bindings_extractor<std::tuple<First, Rest...>> {$/;"	s	namespace:VkZero::ShaderDetails
buffer	include/VkZero/Internal/image_internal.hpp	/^        VkBuffer buffer;$/;"	m	struct:VkZero::StagingData_T	typeref:typename:VkBuffer
callableRegion	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkStridedDeviceAddressRegionKHR callableRegion;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkStridedDeviceAddressRegionKHR
camera	include/Engine.hpp	/^  static std::unique_ptr<class Camera> camera;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<class Camera>
camera	src/Engine.cpp	/^std::unique_ptr<Camera> VoxelEngine::camera;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<Camera>
cameraPosition	include/Camera.hpp	/^  glm::vec3 cameraPosition =$/;"	m	class:Camera	typeref:typename:glm::vec3
cameraTargetPoint	include/Camera.hpp	/^  glm::vec3 cameraTargetPoint = glm::vec3(1.0f, 0.0f, 0.0f);$/;"	m	class:Camera	typeref:typename:glm::vec3
cameraVelocity	include/Camera.hpp	/^  glm::vec3 cameraVelocity = glm::vec3(0.0f, 0.0f, 0.0f);$/;"	m	class:Camera	typeref:typename:glm::vec3
capabilities	include/VkZero/Internal/image_internal.hpp	/^      VkSurfaceCapabilitiesKHR capabilities;$/;"	m	struct:VkZero::SwapChainSupportDetails	typeref:typename:VkSurfaceCapabilitiesKHR
capabilities	include/VkZero/Internal/window_internal.hpp	/^    VkSurfaceCapabilitiesKHR capabilities;$/;"	m	struct:VkZero::WindowImpl_T::SwapChainSupportDetails	typeref:typename:VkSurfaceCapabilitiesKHR
changeLayout	include/VkZero/image.hpp	/^        void changeLayout(ImageLayout newLayout, uint32_t index)$/;"	f	class:VkZero::ImageBase	typeref:typename:void
changeLayout	include/VkZero/image.hpp	/^        void changeLayout(ImageLayout newLayout, uint32_t index)$/;"	f	class:VkZero::StagedImageBase	typeref:typename:void
changeLayout	include/VkZero/image.hpp	/^        void changeLayout(VkCommandBuffer commandBuffer, ImageLayout newLayout, uint32_t index)$/;"	f	class:VkZero::ImageBase	typeref:typename:void
changeLayout	include/VkZero/image.hpp	/^        void changeLayout(VkCommandBuffer commandBuffer, ImageLayout newLayout, uint32_t index)$/;"	f	class:VkZero::StagedImageBase	typeref:typename:void
changeLayout	src/VkZero/image.cpp	/^void Image::changeLayout(ImageData image, VkImageLayout newLayout, int mipLevels)$/;"	f	class:Image	typeref:typename:void
changeLayout	src/VkZero/image.cpp	/^void Image::changeLayout(VkCommandBuffer commandBuffer, ImageData image, VkImageLayout newLayout/;"	f	class:Image	typeref:typename:void
checkDeviceExtensionSupport	src/VkZero/core.cpp	/^bool VkZeroCoreImpl_T::checkDeviceExtensionSupport(VkPhysicalDevice device) {$/;"	f	class:VkZeroCoreImpl_T	typeref:typename:bool
checkValidationLayerSupport	src/VkZero/core.cpp	/^bool VkZeroCoreImpl_T::checkValidationLayerSupport() {$/;"	f	class:VkZeroCoreImpl_T	typeref:typename:bool
chooseDevice	src/VkZero/core.cpp	/^void VkZeroCoreImpl_T::chooseDevice(WindowImpl_T* window)$/;"	f	class:VkZeroCoreImpl_T	typeref:typename:void
chooseSwapExtent	src/VkZero/window.cpp	/^VkExtent2D WindowImpl_T::chooseSwapExtent(const VkSurfaceCapabilitiesKHR &capabilities) {$/;"	f	class:WindowImpl_T	typeref:typename:VkExtent2D
chooseSwapPresentMode	src/VkZero/window.cpp	/^VkPresentModeKHR WindowImpl_T::chooseSwapPresentMode($/;"	f	class:WindowImpl_T	typeref:typename:VkPresentModeKHR
chooseSwapSurfaceFormat	src/VkZero/window.cpp	/^VkSurfaceFormatKHR WindowImpl_T::chooseSwapSurfaceFormat($/;"	f	class:WindowImpl_T	typeref:typename:VkSurfaceFormatKHR
chunkPosition	include/Camera.hpp	/^  glm::ivec3 chunkPosition = glm::ivec3(0, 0, 0);$/;"	m	class:Camera	typeref:typename:glm::ivec3
chunkPosition	include/VoxelWorld.hpp	/^  glm::ivec3 chunkPosition;$/;"	m	class:VoxelWorld	typeref:typename:glm::ivec3
chunkQueue	include/VoxelWorld.hpp	/^  std::vector<uint16_t> chunkQueue;$/;"	m	class:VoxelWorld	typeref:typename:std::vector<uint16_t>
chunkSort	src/VoxelWorld.cpp	/^bool VoxelWorld::chunkSort(uint16_t a, uint16_t b) {$/;"	f	class:VoxelWorld	typeref:typename:bool
chunkUpdateQueue	include/VoxelWorld.hpp	/^  std::vector<uint16_t> chunkUpdateQueue;$/;"	m	class:VoxelWorld	typeref:typename:std::vector<uint16_t>
chunkWorker	src/VoxelWorld.cpp	/^void VoxelWorld::chunkWorker() {$/;"	f	class:VoxelWorld	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
cleanupSwapChain	src/VkZero/window.cpp	/^void WindowImpl_T::cleanupSwapChain() {$/;"	f	class:WindowImpl_T	typeref:typename:void
commandBuffers	include/CommandManager.hpp	/^  std::vector<VkCommandBuffer> commandBuffers;$/;"	m	class:CommandManager	typeref:typename:std::vector<VkCommandBuffer>
commandBuffers	include/VkZero/frame.hpp	/^  std::vector<VkCommandBuffer> commandBuffers[MAX_FRAMES_IN_FLIGHT];$/;"	m	struct:VkZero::frameImpl_T	typeref:typename:std::vector<VkCommandBuffer>[]
commandManager	include/Engine.hpp	/^  static std::unique_ptr<class CommandManager> commandManager;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<class CommandManager>
commandManager	src/Engine.cpp	/^std::unique_ptr<CommandManager> VoxelEngine::commandManager;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<CommandManager>
commandPool	include/CommandManager.hpp	/^  VkCommandPool commandPool;$/;"	m	class:CommandManager	typeref:typename:VkCommandPool
commandPool	include/VkZero/frame.hpp	/^  VkCommandPool commandPool;$/;"	m	struct:VkZero::frameImpl_T	typeref:typename:VkCommandPool
commonAttachments	include/VkZero/render_pass.hpp	/^  using commonAttachments =$/;"	t	class:VkZero::GraphicsRenderpass	typeref:typename:RenderPassDetails::get_common_attachments<allAttachments>::value
contains	src/VkZero/descriptor_pool.cpp	/^struct contains<T, std::tuple<U, Rest...>> $/;"	s	file:
contains_attachment	include/VkZero/render_pass.hpp	/^struct contains_attachment<T, std::tuple<First, Rest...>>$/;"	s	namespace:VkZero::RenderPassDetails
createBuffer	src/Engine.cpp	/^void VoxelEngine::createBuffer(VkDevice device, VkPhysicalDevice physicalDevice,$/;"	f	class:VoxelEngine	typeref:typename:void
createCommandBuffers	src/Engine.cpp	/^  void VoxelEngine::createCommandBuffers() {$/;"	f	class:VoxelEngine	typeref:typename:void
createCommandPool	src/CommandManager.cpp	/^void CommandManager::createCommandPool() {$/;"	f	class:CommandManager	typeref:typename:void
createInstance	src/VkZero/core.cpp	/^void VkZeroCoreImpl_T::createInstance() {$/;"	f	class:VkZeroCoreImpl_T	typeref:typename:void
createLogicalDevice	src/VkZero/core.cpp	/^void VkZeroCoreImpl_T::createLogicalDevice(WindowImpl_T* window) {$/;"	f	class:VkZeroCoreImpl_T	typeref:typename:void
createRaytracingPipeline	src/Raytracer.cpp	/^void Raytracer::createRaytracingPipeline($/;"	f	class:Raytracer	typeref:typename:void
createRaytracingPipeline	src/VkZeroObjects.cpp	/^void VkZeroObjects::createRaytracingPipeline($/;"	f	class:VkZeroObjects	typeref:typename:void
createRenderPass	src/VkZero/graphics_renderpass.cpp	/^void GraphicsRenderpassImpl_T::createRenderPass($/;"	f	class:GraphicsRenderpassImpl_T	typeref:typename:void
createShaderModule	src/PipelineManager.cpp	/^VkShaderModule PipelineManager::createShaderModule(VkDevice device,$/;"	f	class:PipelineManager	typeref:typename:VkShaderModule
createShaderModule	src/VkZero/shader.cpp	/^VkShaderModule ShaderImpl_T::createShaderModule(VkDevice device,$/;"	f	class:ShaderImpl_T	typeref:typename:VkShaderModule
createSwapChain	src/VkZero/window.cpp	/^void WindowImpl_T::createSwapChain(VkSwapchainKHR& swapChain) {$/;"	f	class:WindowImpl_T	typeref:typename:void
createSwapchainImages	src/VkZero/window.cpp	/^AttachmentImage WindowImpl_T::createSwapchainImages() {$/;"	f	class:WindowImpl_T	typeref:typename:AttachmentImage
create_init_list	include/VkZero/binding.hpp	/^  static constexpr auto create_init_list(Resource *info,$/;"	f	struct:VkZero::ResourceBinding	typeref:typename:auto
create_pipeline	src/VkZero/graphics_pipeline.cpp	/^  void GraphicsPipelineImpl_T::create_pipeline(VkDevice device, VkRenderPass renderPass) {$/;"	f	class:GraphicsPipelineImpl_T	typeref:typename:void
cross_set_binding_validity_checker	include/VkZero/graphics_pipeline.hpp	/^constexpr bool cross_set_binding_validity_checker() {$/;"	f	namespace:VkZero::PipelineDetails	typeref:typename:bool
currentFrame	include/Engine.hpp	/^  static uint32_t currentFrame;$/;"	m	class:VoxelEngine	typeref:typename:uint32_t
currentFrame	include/VkZero/frame.hpp	/^  int currentFrame = 0;$/;"	m	struct:VkZero::frameImpl_T	typeref:typename:int
currentFrame	src/Engine.cpp	/^uint32_t VoxelEngine::currentFrame = 0;$/;"	m	class:VoxelEngine	typeref:typename:uint32_t
current_binding	include/VkZero/binding.hpp	/^    static constexpr int current_binding = First::get_binding();$/;"	m	struct:VkZero::CombinedBindings::filter_duplicates	typeref:typename:int
data	include/Raytracer.hpp	/^  RaytracingPushConstantData data;$/;"	m	class:Raytracer	typeref:typename:RaytracingPushConstantData
data	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  char* data;$/;"	m	struct:VkZero::PushConstantDataImpl_T	typeref:typename:char *
data	include/VoxelWorld.hpp	/^    u_int8_t *data;$/;"	m	struct:VoxelWorld::VoxelChunk	typeref:typename:u_int8_t *
debugCallback	include/Engine.hpp	/^  debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,$/;"	f	class:VoxelEngine	typeref:typename:VKAPI_ATTR VkBool32 VKAPI_CALL
debugCallback	src/VkZero/core.cpp	/^debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,$/;"	f	typeref:typename:VKAPI_ATTR VkBool32 VKAPI_CALL	file:
debugMessenger	include/VkZero/Internal/core_internal.hpp	/^    VkDebugUtilsMessengerEXT debugMessenger;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkDebugUtilsMessengerEXT
debugMessenger	include/VkZero/context.hpp	/^    VkDebugUtilsMessengerEXT debugMessenger;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkDebugUtilsMessengerEXT
deltaTime	include/VkZero/Internal/window_internal.hpp	/^  double deltaTime = 0;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:double
depth	include/VkZero/Internal/image_internal.hpp	/^        uint32_t width, height, depth;$/;"	m	struct:VkZero::ImageImpl_T	typeref:typename:uint32_t
descriptorCount	include/VkZero/Internal/binding_internal.hpp	/^  uint32_t descriptorCount;$/;"	m	struct:VkZero::ResourceBindingImpl_T	typeref:typename:uint32_t
descriptorCount	src/VkZero/binding.cpp	/^  uint32_t descriptorCount;$/;"	v	typeref:typename:uint32_t
descriptorSet	include/PipelineManager.hpp	/^  std::vector<VkDescriptorSet> descriptorSet;$/;"	m	class:PipelineManager	typeref:typename:std::vector<VkDescriptorSet>
descriptorSetLayout	include/VkZero/Internal/shader_resource_set_internal.hpp	/^  VkDescriptorSetLayout descriptorSetLayout;$/;"	m	struct:VkZero::ShaderResourceSetImpl_T	typeref:typename:VkDescriptorSetLayout
descriptorSets	include/VkZero/Internal/shader_resource_set_internal.hpp	/^  std::vector<VkDescriptorSet> descriptorSets;$/;"	m	struct:VkZero::ShaderResourceSetImpl_T	typeref:typename:std::vector<VkDescriptorSet>
device	include/VkZero/Internal/core_internal.hpp	/^    VkDevice device;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkDevice
device	include/VkZero/Internal/window_internal.hpp	/^  VkDevice device;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:VkDevice
device	include/VkZero/context.hpp	/^    VkDevice device;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkDevice
deviceExtensions	src/VkZero/core.cpp	/^const std::vector<const char *> deviceExtensions = {$/;"	v	typeref:typename:const std::vector<const char * >
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:0
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:1
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:10
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:11
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:12
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:13
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:14
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:15
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:16
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:2
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:3
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:4
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:5
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:6
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:7
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:8
directory	compile_commands.json	/^    "directory": "\/home\/hnsorens\/VoxelEngine",$/;"	s	object:9
draw	include/VkZero/frame.hpp	/^  void draw() { impl->draw(); }$/;"	f	struct:VkZero::frameBase	typeref:typename:void
draw	include/VkZero/frame.hpp	/^  void draw() {$/;"	f	struct:VkZero::frameImpl_T	typeref:typename:void
draw	src/VkZeroObjects.cpp	/^void VkZeroObjects::draw()$/;"	f	class:VkZeroObjects	typeref:typename:void
drawFrame	src/Engine.cpp	/^  void VoxelEngine::drawFrame() {$/;"	f	class:VoxelEngine	typeref:typename:void
duplicate_binding_checker	include/VkZero/shader.hpp	/^        struct duplicate_binding_checker<> {$/;"	s	namespace:VkZero::ShaderDetails
duplicate_binding_checker	include/VkZero/shader.hpp	/^        struct duplicate_binding_checker<First, Rest...>$/;"	s	namespace:VkZero::ShaderDetails
duplicate_binding_number_checker	include/VkZero/shader_resource_set.hpp	/^struct duplicate_binding_number_checker<First, Rest...> {$/;"	s	namespace:VkZero::ShaderResourceSetDetails
duplicate_binding_number_checker	include/VkZero/shader_resource_set.hpp	/^template <> struct duplicate_binding_number_checker<> {$/;"	s	namespace:VkZero::ShaderResourceSetDetails
enableValidationLayers	src/VkZero/core.cpp	/^const bool enableValidationLayers = true;$/;"	v	typeref:typename:const bool
endSingleTimeCommands	src/CommandManager.cpp	/^void CommandManager::endSingleTimeCommands($/;"	f	class:CommandManager	typeref:typename:void
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/Camera.cpp",$/;"	s	object:0
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/CommandManager.cpp",$/;"	s	object:1
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/Engine.cpp",$/;"	s	object:2
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/PipelineManager.cpp",$/;"	s	object:4
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/Raytracer.cpp",$/;"	s	object:5
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/SyncManager.cpp",$/;"	s	object:6
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VkZero\/binding.cpp",$/;"	s	object:8
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VkZero\/core.cpp",$/;"	s	object:9
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VkZero\/descriptor_pool.cpp",$/;"	s	object:10
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VkZero\/image.cpp",$/;"	s	object:11
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VkZero\/render_pass.cpp",$/;"	s	object:12
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VkZero\/resource_manager.cpp",$/;"	s	object:13
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VkZero\/shader.cpp",$/;"	s	object:15
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VkZero\/shader_builder.cpp",$/;"	s	object:14
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VkZero\/window.cpp",$/;"	s	object:16
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/VoxelWorld.cpp",$/;"	s	object:7
file	compile_commands.json	/^    "file": "\/home\/hnsorens\/VoxelEngine\/src\/main.cpp",$/;"	s	object:3
filter_duplicates	include/VkZero/binding.hpp	/^  struct filter_duplicates<std::tuple<First, Rest...>, std::tuple<Result...>> {$/;"	s	struct:VkZero::CombinedBindings
filter_preserve_input	include/VkZero/render_pass.hpp	/^struct filter_preserve_input<std::tuple<First, Rest...>, All> {$/;"	s	namespace:VkZero::RenderPassDetails
filtered	include/VkZero/render_pass.hpp	/^  using filtered =$/;"	t	struct:VkZero::RenderPassDetails::get_common_attachments	typeref:typename:filter_preserve_input<AllAttachments,AllAttachments>::type
findMemoryType	src/VkZero/resource_manager.cpp	/^uint32_t ResourceManager::findMemoryType(VkPhysicalDevice physicalDevice,$/;"	f	class:ResourceManager	typeref:typename:uint32_t
findQueueFamilies	src/VkZero/core.cpp	/^QueueFamilyIndices VkZeroCoreImpl_T::findQueueFamilies(VkPhysicalDevice device, WindowImpl_T* wi/;"	f	class:VkZeroCoreImpl_T	typeref:typename:QueueFamilyIndices
findResourceIndex	include/VkZero/render_pass.hpp	/^constexpr std::size_t findResourceIndex() {$/;"	f	namespace:VkZero::RenderPassResourceSetDetails	typeref:typename:std::size_t
find_binding	include/VkZero/binding.hpp	/^struct find_binding<binding, std::tuple<First, Rest...>> {$/;"	s	namespace:VkZero
firstMouse	include/Camera.hpp	/^  bool firstMouse = true;$/;"	m	class:Camera	typeref:typename:bool
flag	include/shaders.hpp	/^  uint32_t flag;$/;"	m	struct:RaytracingPushConstant	typeref:typename:uint32_t
format	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  VkFormat format;$/;"	m	struct:VkZero::AttachmentImpl_T	typeref:typename:VkFormat
format	include/VkZero/Internal/image_internal.hpp	/^        VkFormat format;$/;"	m	struct:VkZero::ImageImpl_T	typeref:typename:VkFormat
formatSize	src/VkZero/image.cpp	/^size_t formatSize(VkFormat format)$/;"	f	typeref:typename:size_t
formats	include/VkZero/Internal/image_internal.hpp	/^      std::vector<VkSurfaceFormatKHR> formats;$/;"	m	struct:VkZero::SwapChainSupportDetails	typeref:typename:std::vector<VkSurfaceFormatKHR>
formats	include/VkZero/Internal/window_internal.hpp	/^    std::vector<VkSurfaceFormatKHR> formats;$/;"	m	struct:VkZero::WindowImpl_T::SwapChainSupportDetails	typeref:typename:std::vector<VkSurfaceFormatKHR>
frame	include/Camera.hpp	/^  std::vector<int> frame;$/;"	m	class:Camera	typeref:typename:std::vector<int>
frame	include/VkZero/frame.hpp	/^  frame(Renderpasses &...renderpasses, WindowImpl_T* window)$/;"	f	class:VkZero::frame
frame	include/VkZero/frame.hpp	/^template <typename... Renderpasses> class frame : public frameBase {$/;"	c	namespace:VkZero
frame	include/VkZeroObjects.hpp	/^  VkZero::frame<RaytracingRenderPass_t, PipelineRenderPass> frame;$/;"	m	class:VkZeroObjects	typeref:typename:VkZero::frame<RaytracingRenderPass_t,PipelineRenderPass>
frame	include/shaders.hpp	/^  uint32_t frame;$/;"	m	struct:RaytracingPushConstant	typeref:typename:uint32_t
frameBase	include/VkZero/frame.hpp	/^  frameBase(std::vector<struct RenderpassImpl_T *> renderpasses, WindowImpl_T* window) {$/;"	f	struct:VkZero::frameBase
frameBase	include/VkZero/frame.hpp	/^struct frameBase {$/;"	s	namespace:VkZero
frameImpl_T	include/VkZero/frame.hpp	/^  frameImpl_T(std::vector<RenderpassImpl_T *> renderpasses, WindowImpl_T* window)$/;"	f	struct:VkZero::frameImpl_T
frameImpl_T	include/VkZero/frame.hpp	/^struct frameImpl_T {$/;"	s	namespace:VkZero
framebufferCount	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  int framebufferCount = 3;$/;"	m	struct:VkZero::RenderPassResourceSetImpl_T	typeref:typename:int
framebufferResizeCallback	src/VkZero/window.cpp	/^static void framebufferResizeCallback(GLFWwindow *window, int width,$/;"	f	typeref:typename:void	file:
framebufferResized	include/VkZero/Internal/window_internal.hpp	/^  bool framebufferResized = false;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:bool
framebuffers	include/PipelineManager.hpp	/^  std::vector<VkFramebuffer> framebuffers;$/;"	m	class:PipelineManager	typeref:typename:std::vector<VkFramebuffer>
framebuffers	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  std::vector<VkFramebuffer> framebuffers;$/;"	m	struct:VkZero::GraphicsRenderpassImpl_T	typeref:typename:std::vector<VkFramebuffer>
generateChunk	src/VoxelWorld.cpp	/^void VoxelWorld::generateChunk(VoxelChunk &chunk) {$/;"	f	class:VoxelWorld	typeref:typename:void
generateTerrain	src/VoxelWorld.cpp	/^void VoxelWorld::generateTerrain() {$/;"	f	class:VoxelWorld	typeref:typename:void
get	include/VkZero/descriptor_pool.hpp	/^        VkDescriptorPool get()$/;"	f	class:VkZero::DescriptorPool	typeref:typename:VkDescriptorPool
get	include/VkZero/shader_group.hpp	/^  static std::vector<struct AttachmentImpl_T*> get()$/;"	f	struct:VkZero::GetAttachments	typeref:typename:std::vector<struct AttachmentImpl_T * >
get	include/VkZero/shader_library.hpp	/^        constexpr auto& get() {$/;"	f	class:VkZero::ShaderLibrary	typeref:typename:auto &
getChunk	src/VoxelWorld.cpp	/^uint8_t *VoxelWorld::getChunk(glm::vec3 position) {$/;"	f	class:VoxelWorld	typeref:typename:uint8_t *
getChunkID	src/VoxelWorld.cpp	/^uint16_t VoxelWorld::getChunkID(glm::vec3 position) {$/;"	f	class:VoxelWorld	typeref:typename:uint16_t
getCommandBuffers	src/CommandManager.cpp	/^const std::vector<VkCommandBuffer> &CommandManager::getCommandBuffers() const {$/;"	f	class:CommandManager	typeref:typename:const std::vector<VkCommandBuffer> &
getCommandPool	src/CommandManager.cpp	/^VkCommandPool CommandManager::getCommandPool() const { return commandPool; }$/;"	f	class:CommandManager	typeref:typename:VkCommandPool
getCursorPos	src/VkZero/window.cpp	/^void Window::getCursorPos(double *currentMouseX, double *currentMouseY) {$/;"	f	class:Window	typeref:typename:void
getDeltaTime	src/VkZero/window.cpp	/^double Window::getDeltaTime() const { return impl->deltaTime; }$/;"	f	class:Window	typeref:typename:double
getDescriptorSet	src/PipelineManager.cpp	/^const VkDescriptorSet &PipelineManager::getDescriptorSet(int i) const {$/;"	f	class:PipelineManager	typeref:typename:const VkDescriptorSet &
getDescriptorSet	src/Raytracer.cpp	/^const VkDescriptorSet &Raytracer::getDescriptorSet(int i) const {$/;"	f	class:Raytracer	typeref:typename:const VkDescriptorSet &
getFrameBuffer	include/PipelineManager.hpp	/^  const VkFramebuffer getFrameBuffer(int i) const { return framebuffers[i]; }$/;"	f	class:PipelineManager	typeref:typename:const VkFramebuffer
getFramebufferSize	src/VkZero/window.cpp	/^void Window::getFramebufferSize(int *width, int *height) {$/;"	f	class:Window	typeref:typename:void
getFramebuffers	src/VkZero/graphics_renderpass.cpp	/^GraphicsRenderpassImpl_T::getFramebuffers() const {$/;"	f	class:GraphicsRenderpassImpl_T	typeref:typename:const std::vector<VkFramebuffer> &
getGraphicsPipeline	src/PipelineManager.cpp	/^const VkPipeline &PipelineManager::getGraphicsPipeline() const {$/;"	f	class:PipelineManager	typeref:typename:const VkPipeline &
getGraphicsPipelineLayout	src/PipelineManager.cpp	/^const VkPipelineLayout &PipelineManager::getGraphicsPipelineLayout() const {$/;"	f	class:PipelineManager	typeref:typename:const VkPipelineLayout &
getImageAvailableSemaphores	src/SyncManager.cpp	/^SyncManager::getImageAvailableSemaphores() const {$/;"	f	class:SyncManager	typeref:typename:const std::vector<VkSemaphore> &
getInFlightFences	src/SyncManager.cpp	/^const std::vector<VkFence> &SyncManager::getInFlightFences() const {$/;"	f	class:SyncManager	typeref:typename:const std::vector<VkFence> &
getInstance	include/VkZero/Internal/core_internal.hpp	/^    static VkZeroCoreImpl_T* getInstance()$/;"	f	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkZeroCoreImpl_T *
getInstance	include/VkZero/context.hpp	/^    static VkZeroCoreImpl_T* getInstance()$/;"	f	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkZeroCoreImpl_T *
getPipeline	src/Raytracer.cpp	/^const VkPipeline &Raytracer::getPipeline() const { return raytracingPipeline; }$/;"	f	class:Raytracer	typeref:typename:const VkPipeline &
getPipelineLayout	src/Raytracer.cpp	/^const VkPipelineLayout &Raytracer::getPipelineLayout() const {$/;"	f	class:Raytracer	typeref:typename:const VkPipelineLayout &
getPitch	src/Camera.cpp	/^float Camera::getPitch() const { return 0.0f; }/;"	f	class:Camera	typeref:typename:float
getPosition	src/Camera.cpp	/^glm::vec3 Camera::getPosition() const { return glm::vec3(0.0f); }$/;"	f	class:Camera	typeref:typename:glm::vec3
getRenderFinishedSemaphores	src/SyncManager.cpp	/^SyncManager::getRenderFinishedSemaphores() const {$/;"	f	class:SyncManager	typeref:typename:const std::vector<VkSemaphore> &
getRenderPass	src/PipelineManager.cpp	/^const VkRenderPass &PipelineManager::getRenderPass() const {$/;"	f	class:PipelineManager	typeref:typename:const VkRenderPass &
getRenderPass	src/VkZero/graphics_renderpass.cpp	/^VkRenderPass GraphicsRenderpassImpl_T::getRenderPass() const {$/;"	f	class:GraphicsRenderpassImpl_T	typeref:typename:VkRenderPass
getRequiredExtensions	src/VkZero/core.cpp	/^std::vector<const char *> VkZeroCoreImpl_T::getRequiredExtensions() {$/;"	f	class:VkZeroCoreImpl_T	typeref:typename:std::vector<const char * >
getStorageImage	src/Raytracer.cpp	/^VkZero::SwapImage* Raytracer::getStorageImage() {$/;"	f	class:Raytracer	typeref:typename:VkZero::SwapImage *
getSwapChain	src/VkZero/window.cpp	/^VkSwapchainKHR WindowImpl_T::getSwapChain()$/;"	f	class:WindowImpl_T	typeref:typename:VkSwapchainKHR
getSwapChainExtent	src/VkZero/window.cpp	/^VkExtent2D Window::getSwapChainExtent()$/;"	f	class:Window	typeref:typename:VkExtent2D
getSwapChainImages	src/VkZero/window.cpp	/^AttachmentImage& Window::getSwapChainImages()$/;"	f	class:Window	typeref:typename:AttachmentImage &
getTarget	src/Camera.cpp	/^glm::vec3 Camera::getTarget() const { return glm::vec3(0.0f); }$/;"	f	class:Camera	typeref:typename:glm::vec3
getViewMatrix	src/Camera.cpp	/^glm::mat4 Camera::getViewMatrix() const { return glm::mat4(1.0f); }$/;"	f	class:Camera	typeref:typename:glm::mat4
getWindow	src/VkZero/window.cpp	/^GLFWwindow *WindowImpl_T::getWindow() const { return window; }$/;"	f	class:WindowImpl_T	typeref:typename:GLFWwindow *
getYaw	src/Camera.cpp	/^float Camera::getYaw() const { return 0.0f; }$/;"	f	class:Camera	typeref:typename:float
get_all_attachments	include/VkZero/render_pass.hpp	/^struct get_all_attachments<std::tuple<First, Rest...>> {$/;"	s	namespace:VkZero::RenderPassDetails
get_binding	include/VkZero/binding.hpp	/^  static constexpr int get_binding() { return Binding; }$/;"	f	struct:VkZero::ResourceBinding	typeref:typename:int
get_binding	include/VkZero/binding.hpp	/^  static constexpr int get_binding() { return Binding; }$/;"	f	struct:VkZero::ShaderBinding	typeref:typename:int
get_binding	include/VkZero/binding.hpp	/^  static constexpr int get_binding() { return binding; }$/;"	f	struct:VkZero::Bind	typeref:typename:int
get_binding_set	include/VkZero/binding.hpp	/^  static constexpr int get_binding_set() { return BindingSet; }$/;"	f	struct:VkZero::ShaderBinding	typeref:typename:int
get_binding_type	include/VkZero/binding.hpp	/^using get_binding_type = typename find_binding<binding, Tuple>::type;$/;"	t	namespace:VkZero	typeref:typename:find_binding<binding,Tuple>::type
get_common_attachments	include/VkZero/render_pass.hpp	/^template <typename AllAttachments> struct get_common_attachments {$/;"	s	namespace:VkZero::RenderPassDetails
get_descriptor_count	include/VkZero/binding.hpp	/^  static constexpr int get_descriptor_count() { return DescriptorCount; }$/;"	f	struct:VkZero::ResourceBinding	typeref:typename:int
get_descriptor_count	include/VkZero/binding.hpp	/^  static constexpr int get_descriptor_count() { return DescriptorCount; }$/;"	f	struct:VkZero::ShaderBinding	typeref:typename:int
get_format	include/VkZero/render_pass.hpp	/^  static constexpr VkFormat get_format() { return Format; }$/;"	f	struct:VkZero::ColorAttachment	typeref:typename:VkFormat
get_format	include/VkZero/render_pass.hpp	/^  static constexpr VkFormat get_format() { return Format; }$/;"	f	struct:VkZero::DepthAttachment	typeref:typename:VkFormat
get_format	include/VkZero/render_pass.hpp	/^  static constexpr VkFormat get_format() { return Format; }$/;"	f	struct:VkZero::InputAttachment	typeref:typename:VkFormat
get_location	include/VkZero/render_pass.hpp	/^  static constexpr int get_location() { return Location; }$/;"	f	struct:VkZero::ColorAttachment	typeref:typename:int
get_location	include/VkZero/render_pass.hpp	/^  static constexpr int get_location() { return Location; }$/;"	f	struct:VkZero::DepthAttachment	typeref:typename:int
get_location	include/VkZero/render_pass.hpp	/^  static constexpr int get_location() { return Location; }$/;"	f	struct:VkZero::InputAttachment	typeref:typename:int
get_shader	include/Engine.hpp	/^  static auto& get_shader()$/;"	f	class:VoxelEngine	typeref:typename:auto &
get_shader_bindings	src/VkZero/descriptor_pool.cpp	/^struct get_shader_bindings<std::tuple<First, Rest...>> {$/;"	s	file:
get_stages	include/VkZero/binding.hpp	/^  static constexpr int get_stages() { return Stages; }$/;"	f	struct:VkZero::ResourceBinding	typeref:typename:int
get_type	include/VkZero/binding.hpp	/^  static constexpr VkDescriptorType get_type() { return type::type(); }$/;"	f	struct:VkZero::Bind	typeref:typename:VkDescriptorType
get_type	include/VkZero/shader.hpp	/^        static constexpr ShaderType get_type() { return Type; }$/;"	f	class:VkZero::Shader	typeref:typename:ShaderType
graphicsFamily	include/VkZero/Internal/core_internal.hpp	/^    std::optional<uint32_t> graphicsFamily;$/;"	m	struct:VkZero::QueueFamilyIndices	typeref:typename:std::optional<uint32_t>
graphicsFamily	include/VkZero/context.hpp	/^    std::optional<uint32_t> graphicsFamily;$/;"	m	struct:VkZero::QueueFamilyIndices	typeref:typename:std::optional<uint32_t>
graphicsPipeline	include/VkZeroObjects.hpp	/^  Pipeline graphicsPipeline;$/;"	m	class:VkZeroObjects	typeref:typename:Pipeline
graphicsPushConstants	include/VkZeroObjects.hpp	/^  PipelineShaderPushConstant graphicsPushConstants;$/;"	m	class:VkZeroObjects	typeref:typename:PipelineShaderPushConstant
graphicsQueue	include/VkZero/Internal/core_internal.hpp	/^    VkQueue graphicsQueue;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkQueue
graphicsQueue	include/VkZero/context.hpp	/^    VkQueue graphicsQueue;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkQueue
graphicsRenderPass	include/VkZeroObjects.hpp	/^  PipelineRenderPass graphicsRenderPass;$/;"	m	class:VkZeroObjects	typeref:typename:PipelineRenderPass
graphicsRenderpassAttachmentSet	include/VkZeroObjects.hpp	/^  PipelineRenderPassResources graphicsRenderpassAttachmentSet;$/;"	m	class:VkZeroObjects	typeref:typename:PipelineRenderPassResources
graphicsResourceSet	include/VkZeroObjects.hpp	/^  PipelineShaderResources graphicsResourceSet;$/;"	m	class:VkZeroObjects	typeref:typename:PipelineShaderResources
graphicsShaderGroup	include/VkZeroObjects.hpp	/^  PipelineShaderGroup graphicsShaderGroup;$/;"	m	class:VkZeroObjects	typeref:typename:PipelineShaderGroup
group	include/PipelineManager.hpp	/^  PipelineShaderGroup group;$/;"	m	class:PipelineManager	typeref:typename:PipelineShaderGroup
group	include/Raytracer.hpp	/^  RaytracingShaderGroup group;$/;"	m	class:Raytracer	typeref:typename:RaytracingShaderGroup
has_binding	include/VkZero/binding.hpp	/^template <int binding, typename Tuple> struct has_binding {$/;"	s	namespace:VkZero
height	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  uint32_t width, height;$/;"	m	struct:VkZero::GraphicsRenderpassImpl_T	typeref:typename:uint32_t
height	include/VkZero/Internal/image_internal.hpp	/^        uint32_t width, height, depth;$/;"	m	struct:VkZero::ImageImpl_T	typeref:typename:uint32_t
height	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  uint32_t height;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:uint32_t
hideCursor	src/VkZero/window.cpp	/^void Window::hideCursor() {$/;"	f	class:Window	typeref:typename:void
hitRegion	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkStridedDeviceAddressRegionKHR hitRegion;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkStridedDeviceAddressRegionKHR
image	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  AttachmentImage *image;$/;"	m	struct:VkZero::RenderPassResourceImpl_T	typeref:typename:AttachmentImage *
image	include/VkZero/Internal/image_internal.hpp	/^        VkImage image;$/;"	m	struct:VkZero::ImageData_T	typeref:typename:VkImage
imageAvailableSemaphores	include/SyncManager.hpp	/^  std::vector<VkSemaphore> imageAvailableSemaphores;$/;"	m	class:SyncManager	typeref:typename:std::vector<VkSemaphore>
imageAvailableSemaphores	include/VkZero/frame.hpp	/^  std::vector<VkSemaphore> imageAvailableSemaphores;$/;"	m	struct:VkZero::frameImpl_T	typeref:typename:std::vector<VkSemaphore>
imageLayout	include/VkZero/Internal/image_internal.hpp	/^        VkImageLayout imageLayout;$/;"	m	struct:VkZero::ImageImpl_T	typeref:typename:VkImageLayout
imageSampler	src/PipelineManager.cpp	/^  std::vector<VkSampler> imageSampler;$/;"	v	typeref:typename:std::vector<VkSampler>
images	include/VkZero/image.hpp	/^        ImageData images[MaxImageCount];$/;"	m	class:VkZero::ImageBase	typeref:typename:ImageData[]
images	include/VkZero/image.hpp	/^        ImageData images[MaxImageCount];$/;"	m	class:VkZero::StagedImageBase	typeref:typename:ImageData[]
impl	include/VkZero/binding.hpp	/^  struct ResourceBindingImpl_T* impl;$/;"	m	struct:VkZero::ResourceBindingBase	typeref:struct:ResourceBindingImpl_T *
impl	include/VkZero/frame.hpp	/^  struct frameImpl_T *impl;$/;"	m	struct:VkZero::frameBase	typeref:struct:frameImpl_T *
impl	include/VkZero/graphics_pipeline.hpp	/^  struct GraphicsPipelineImpl_T *impl;$/;"	m	struct:VkZero::GraphicsPipelineBase	typeref:struct:GraphicsPipelineImpl_T *
impl	include/VkZero/image.hpp	/^        ImageImpl impl;$/;"	m	class:VkZero::Image	typeref:typename:ImageImpl
impl	include/VkZero/raytracing_pipeline.hpp	/^  struct RaytracingPipelineImpl_T *impl;$/;"	m	struct:VkZero::RaytracingPipelineBase	typeref:struct:RaytracingPipelineImpl_T *
impl	include/VkZero/render_pass.hpp	/^  struct AttachmentImpl_T *impl;$/;"	m	struct:VkZero::AttachmentBase	typeref:struct:AttachmentImpl_T *
impl	include/VkZero/render_pass.hpp	/^  struct GraphicsRenderpassImpl_T *impl;$/;"	m	struct:VkZero::GraphicsRenderpassBase	typeref:struct:GraphicsRenderpassImpl_T *
impl	include/VkZero/render_pass.hpp	/^  struct PushConstantDataImpl_T* impl;$/;"	m	struct:VkZero::PushConstantDataBase	typeref:struct:PushConstantDataImpl_T *
impl	include/VkZero/render_pass.hpp	/^  struct RaytracingRenderpassImpl_T *impl;$/;"	m	struct:VkZero::RaytracingRenderpassBase	typeref:struct:RaytracingRenderpassImpl_T *
impl	include/VkZero/render_pass.hpp	/^  struct RenderPassResourceImpl_T *impl;$/;"	m	struct:VkZero::RenderPassResourceBase	typeref:struct:RenderPassResourceImpl_T *
impl	include/VkZero/render_pass.hpp	/^  struct RenderPassResourceSetImpl_T *impl;$/;"	m	struct:VkZero::RenderPassResourceSetBase	typeref:struct:RenderPassResourceSetImpl_T *
impl	include/VkZero/shader.hpp	/^        struct ShaderImpl_T* impl;$/;"	m	class:VkZero::ShaderBase	typeref:struct:ShaderImpl_T *
impl	include/VkZero/shader_group.hpp	/^  struct ShaderGroupImpl* impl;$/;"	m	struct:VkZero::ShaderGroupBase	typeref:struct:ShaderGroupImpl *
impl	include/VkZero/shader_group.hpp	/^  struct ShaderPushConstantsImpl_T *impl;$/;"	m	struct:VkZero::ShaderPushConstantsBase	typeref:struct:ShaderPushConstantsImpl_T *
impl	include/VkZero/shader_resource_set.hpp	/^  struct ShaderResourceSetImpl_T *impl;$/;"	m	struct:VkZero::ShaderResourceSetBase	typeref:struct:ShaderResourceSetImpl_T *
impl	include/VkZero/window.hpp	/^    WindowImpl impl;$/;"	m	class:VkZero::Window	typeref:typename:WindowImpl
inFlightFences	include/SyncManager.hpp	/^  std::vector<VkFence> inFlightFences;$/;"	m	class:SyncManager	typeref:typename:std::vector<VkFence>
inFlightFences	include/VkZero/frame.hpp	/^  std::vector<VkFence> inFlightFences;$/;"	m	struct:VkZero::frameImpl_T	typeref:typename:std::vector<VkFence>
inQueue	include/VoxelWorld.hpp	/^    bool inQueue;$/;"	m	struct:VoxelWorld::VoxelChunk	typeref:typename:bool
infoType	include/VkZero/binding.hpp	/^  using infoType = Resource *;$/;"	t	struct:VkZero::ShaderBinding	typeref:typename:Resource *
infoType	include/VkZero/binding.hpp	/^  using infoType = typename type::infoType;$/;"	t	struct:VkZero::Bind	typeref:typename:type::infoType
initVulkan	src/Engine.cpp	/^void VoxelEngine::initVulkan() {$/;"	f	class:VoxelEngine	typeref:typename:void
initWindow	src/Engine.cpp	/^void VoxelEngine::initWindow() {$/;"	f	class:VoxelEngine	typeref:typename:void
instance	include/VkZero/Internal/core_internal.hpp	/^    VkInstance instance;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkInstance
instance	include/VkZero/context.hpp	/^    VkInstance instance;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkInstance
instance	include/VkZero/descriptor_pool.hpp	/^        static DescriptorPool& instance() {$/;"	f	class:VkZero::DescriptorPool	typeref:typename:DescriptorPool &
isComplete	include/VkZero/Internal/core_internal.hpp	/^    bool isComplete() {$/;"	f	struct:VkZero::QueueFamilyIndices	typeref:typename:bool
isComplete	include/VkZero/context.hpp	/^    bool isComplete() {$/;"	f	struct:VkZero::QueueFamilyIndices	typeref:typename:bool
isDeviceSuitable	src/VkZero/core.cpp	/^bool VkZeroCoreImpl_T::isDeviceSuitable(VkPhysicalDevice device, WindowImpl_T* window) {$/;"	f	class:VkZeroCoreImpl_T	typeref:typename:bool
isKeyPressed	src/VkZero/window.cpp	/^bool Window::isKeyPressed(int key) {$/;"	f	class:Window	typeref:typename:bool
isMouseButtonPressed	src/VkZero/window.cpp	/^bool Window::isMouseButtonPressed(int button) {$/;"	f	class:Window	typeref:typename:bool
is_attachments_type	include/VkZero/shader.hpp	/^            struct is_attachments_type : std::false_type {};$/;"	s	struct:VkZero::ShaderDetails::attachments_extractor
is_attachments_type	include/VkZero/shader.hpp	/^            struct is_attachments_type<ShaderAttachments<Bs...>> : std::true_type {};$/;"	s	struct:VkZero::ShaderDetails::attachments_extractor
is_binding_valid	include/VkZero/graphics_pipeline.hpp	/^constexpr bool is_binding_valid() {$/;"	f	namespace:VkZero::PipelineDetails	typeref:typename:bool
is_bindings_type	include/VkZero/shader.hpp	/^            struct is_bindings_type : std::false_type {};$/;"	s	struct:VkZero::ShaderDetails::bindings_extractor
is_bindings_type	include/VkZero/shader.hpp	/^            struct is_bindings_type<ShaderBindings<Bs...>> : std::true_type {};$/;"	s	struct:VkZero::ShaderDetails::bindings_extractor
is_push_constant_type	include/VkZero/shader.hpp	/^            struct is_push_constant_type : std::false_type {};$/;"	s	struct:VkZero::ShaderDetails::push_constant_extractor
is_push_constant_type	include/VkZero/shader.hpp	/^            struct is_push_constant_type<ShaderPushConstant<Bs...>> : std::true_type {};$/;"	s	struct:VkZero::ShaderDetails::push_constant_extractor
keyCallback	src/VkZero/window.cpp	/^static void keyCallback(GLFWwindow *window, int key, int scancode, int action, int mods) {$/;"	f	typeref:typename:void	file:
lastMouseX	include/Camera.hpp	/^  float lastMouseX = 0.0f;$/;"	m	class:Camera	typeref:typename:float
lastMouseY	include/Camera.hpp	/^  float lastMouseY = 0.0f;$/;"	m	class:Camera	typeref:typename:float
lastTime	include/VkZero/Internal/window_internal.hpp	/^  double lastTime = 0;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:double
location	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  int location;$/;"	m	struct:VkZero::AttachmentImpl_T	typeref:typename:int
lowerBound	src/Camera.cpp	/^    int lowerBound, upperBound, offset, modValue, shift;$/;"	m	struct:Camera::update::__anona64332f60108	typeref:typename:int	file:
mCellularDistanceFunction	include/FastNoiseLite.hpp	/^  CellularDistanceFunction mCellularDistanceFunction;$/;"	m	class:FastNoiseLite	typeref:typename:CellularDistanceFunction
mCellularJitterModifier	include/FastNoiseLite.hpp	/^  float mCellularJitterModifier;$/;"	m	class:FastNoiseLite	typeref:typename:float
mCellularReturnType	include/FastNoiseLite.hpp	/^  CellularReturnType mCellularReturnType;$/;"	m	class:FastNoiseLite	typeref:typename:CellularReturnType
mDomainWarpAmp	include/FastNoiseLite.hpp	/^  float mDomainWarpAmp;$/;"	m	class:FastNoiseLite	typeref:typename:float
mDomainWarpType	include/FastNoiseLite.hpp	/^  DomainWarpType mDomainWarpType;$/;"	m	class:FastNoiseLite	typeref:typename:DomainWarpType
mFractalBounding	include/FastNoiseLite.hpp	/^  float mFractalBounding;$/;"	m	class:FastNoiseLite	typeref:typename:float
mFractalType	include/FastNoiseLite.hpp	/^  FractalType mFractalType;$/;"	m	class:FastNoiseLite	typeref:typename:FractalType
mFrequency	include/FastNoiseLite.hpp	/^  float mFrequency;$/;"	m	class:FastNoiseLite	typeref:typename:float
mGain	include/FastNoiseLite.hpp	/^  float mGain;$/;"	m	class:FastNoiseLite	typeref:typename:float
mLacunarity	include/FastNoiseLite.hpp	/^  float mLacunarity;$/;"	m	class:FastNoiseLite	typeref:typename:float
mNoiseType	include/FastNoiseLite.hpp	/^  NoiseType mNoiseType;$/;"	m	class:FastNoiseLite	typeref:typename:NoiseType
mOctaves	include/FastNoiseLite.hpp	/^  int mOctaves;$/;"	m	class:FastNoiseLite	typeref:typename:int
mPingPongStrength	include/FastNoiseLite.hpp	/^  float mPingPongStrength;$/;"	m	class:FastNoiseLite	typeref:typename:float
mRotationType3D	include/FastNoiseLite.hpp	/^  RotationType3D mRotationType3D;$/;"	m	class:FastNoiseLite	typeref:typename:RotationType3D
mSeed	include/FastNoiseLite.hpp	/^  int mSeed;$/;"	m	class:FastNoiseLite	typeref:typename:int
mTransformType3D	include/FastNoiseLite.hpp	/^  TransformType3D mTransformType3D;$/;"	m	class:FastNoiseLite	typeref:typename:TransformType3D
mWarpTransformType3D	include/FastNoiseLite.hpp	/^  TransformType3D mWarpTransformType3D;$/;"	m	class:FastNoiseLite	typeref:typename:TransformType3D
mWeightedStrength	include/FastNoiseLite.hpp	/^  float mWeightedStrength;$/;"	m	class:FastNoiseLite	typeref:typename:float
m_ranges	include/VkZero/Internal/shader_group_internal.hpp	/^    std::vector<VkPushConstantRange> &m_ranges;$/;"	m	struct:VkZero::ShaderGroupImpl	typeref:typename:std::vector<VkPushConstantRange> &
m_shaderGroup	include/VkZero/Internal/graphics_pipeline_internal.hpp	/^  ShaderGroupImpl *m_shaderGroup;$/;"	m	struct:VkZero::GraphicsPipelineImpl_T	typeref:typename:ShaderGroupImpl *
m_shaderGroup	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  ShaderGroupImpl *m_shaderGroup;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:ShaderGroupImpl *
m_shaders	include/VkZero/Internal/shader_group_internal.hpp	/^    std::vector<VkPipelineShaderStageCreateInfo> m_shaders;$/;"	m	struct:VkZero::ShaderGroupImpl	typeref:typename:std::vector<VkPipelineShaderStageCreateInfo>
main	src/main.cpp	/^int main() {$/;"	f	typeref:typename:int
mainLoop	src/Engine.cpp	/^void VoxelEngine::mainLoop() {$/;"	f	class:VoxelEngine	typeref:typename:void
main_frag	include/shaders.hpp	/^using main_frag = VkZero::Shader<$/;"	t
main_rgen	include/shaders.hpp	/^using main_rgen = VkZero::Shader<$/;"	t
main_rmiss	include/shaders.hpp	/^using main_rmiss = VkZero::Shader<$/;"	t	typeref:typename:VkZero::Shader<"main_rmiss","bin/rmiss.spv",VkZero::SHADER_RMISS>
main_vert	include/shaders.hpp	/^using main_vert = VkZero::Shader<$/;"	t	typeref:typename:VkZero::Shader<"main_vert","bin/vert.spv",VkZero::SHADER_VERTEX>
matches	include/VkZero/shader_library.hpp	/^        static constexpr bool matches = []() {$/;"	m	struct:VkZero::shader_index	typeref:typename:bool
maxImages	include/VkZero/image.hpp	/^        static constexpr int maxImages = MaxImageCount;$/;"	m	class:VkZero::ImageBase	typeref:typename:int
maxImages	include/VkZero/image.hpp	/^        static constexpr int maxImages = MaxImageCount;$/;"	m	class:VkZero::StagedImageBase	typeref:typename:int
memory	include/VkZero/Internal/image_internal.hpp	/^        VkDeviceMemory memory;$/;"	m	struct:VkZero::ImageData_T	typeref:typename:VkDeviceMemory
memory	include/VkZero/Internal/image_internal.hpp	/^        VkDeviceMemory memory;$/;"	m	struct:VkZero::StagingData_T	typeref:typename:VkDeviceMemory
missRegion	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkStridedDeviceAddressRegionKHR missRegion;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkStridedDeviceAddressRegionKHR
modValue	src/Camera.cpp	/^    int lowerBound, upperBound, offset, modValue, shift;$/;"	m	struct:Camera::update::__anona64332f60108	typeref:typename:int	file:
mouseSensitivity	include/Camera.hpp	/^  float mouseSensitivity = 0.1f;$/;"	m	class:Camera	typeref:typename:float
mouseX	include/Camera.hpp	/^  float mouseX = 0.0f, mouseY = 0.0f;$/;"	m	class:Camera	typeref:typename:float
mouseY	include/Camera.hpp	/^  float mouseX = 0.0f, mouseY = 0.0f;$/;"	m	class:Camera	typeref:typename:float
movementSpeed	include/Camera.hpp	/^  float movementSpeed = 7.0f;$/;"	m	class:Camera	typeref:typename:float
name	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  const char *name;$/;"	m	struct:VkZero::AttachmentImpl_T	typeref:typename:const char *
name	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  const char *name;$/;"	m	struct:VkZero::RenderPassResourceImpl_T	typeref:typename:const char *
name	include/VkZero/render_pass.hpp	/^  static constexpr FixedString name = Name.value;$/;"	m	struct:VkZero::ColorAttachment	typeref:typename:FixedString
name	include/VkZero/render_pass.hpp	/^  static constexpr FixedString name = Name.value;$/;"	m	struct:VkZero::DepthAttachment	typeref:typename:FixedString
name	include/VkZero/render_pass.hpp	/^  static constexpr FixedString name = Name.value;$/;"	m	struct:VkZero::InputAttachment	typeref:typename:FixedString
name	include/VkZero/render_pass.hpp	/^  static constexpr FixedString name = Name.value;$/;"	m	struct:VkZero::PreserveAttachment	typeref:typename:FixedString
name	include/VkZero/render_pass.hpp	/^  static constexpr const char *name = Name.value;$/;"	m	class:VkZero::RenderPassResource	typeref:typename:const char *
name	include/VkZero/shader.hpp	/^        static constexpr FixedString name = ShaderName.value;$/;"	m	class:VkZero::Shader	typeref:typename:FixedString
new_first	include/VkZero/render_pass.hpp	/^  using new_first = First;$/;"	t	struct:VkZero::RenderPassDetails::assign_global_locations	typeref:typename:First
nextImage	include/VkZero/Internal/window_internal.hpp	/^  bool nextImage(uint32_t &imageIndex, VkSemaphore &imageSemaphore) {$/;"	f	struct:VkZero::WindowImpl_T	typeref:typename:bool
noise	include/VoxelWorld.hpp	/^  FastNoiseLite noise;$/;"	m	class:VoxelWorld	typeref:typename:FastNoiseLite
obj	include/Engine.hpp	/^  static std::unique_ptr<class VkZeroObjects> obj;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<class VkZeroObjects>
obj	src/Engine.cpp	/^std::unique_ptr<VkZeroObjects> VoxelEngine::obj;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<VkZeroObjects>
offset	src/Camera.cpp	/^    int lowerBound, upperBound, offset, modValue, shift;$/;"	m	struct:Camera::update::__anona64332f60108	typeref:typename:int	file:
onMouseMove	src/Camera.cpp	/^void Camera::onMouseMove(double xPos, double yPos) {$/;"	f	class:Camera	typeref:typename:void
operator ==	include/VkZero/fixed_string.hpp	/^  constexpr bool operator==(const FixedString<M> &other) const {$/;"	f	struct:VkZero::FixedString	typeref:typename:bool
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:0
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:1
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:10
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:11
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:12
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:13
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:14
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:15
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:16
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:2
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:3
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:4
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:5
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:6
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:7
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:8
output	compile_commands.json	/^    "output": "\/home\/hnsorens\/VoxelEngine\/bin\/voxels"$/;"	s	object:9
pairwise_compatibility_checker	include/VkZero/shader_group.hpp	/^  struct pairwise_compatibility_checker<First, Rest...> {$/;"	s	struct:VkZero::ShaderGroupDetails::shader_binding_validator
pairwise_compatibility_checker	include/VkZero/shader_group.hpp	/^  template <typename... Ts> struct pairwise_compatibility_checker {$/;"	s	struct:VkZero::ShaderGroupDetails::shader_binding_validator
path	include/VkZero/shader.hpp	/^        static constexpr FixedString path = Path.value;$/;"	m	class:VkZero::Shader	typeref:typename:FixedString
physicalDevice	include/VkZero/Internal/core_internal.hpp	/^    VkPhysicalDevice physicalDevice;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkPhysicalDevice
physicalDevice	include/VkZero/Internal/window_internal.hpp	/^  VkPhysicalDevice physicalDevice;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:VkPhysicalDevice
physicalDevice	include/VkZero/context.hpp	/^    VkPhysicalDevice physicalDevice;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkPhysicalDevice
pickPhysicalDevice	src/VkZero/core.cpp	/^void VkZeroCoreImpl_T::pickPhysicalDevice(WindowImpl_T* window) {$/;"	f	class:VkZeroCoreImpl_T	typeref:typename:void
pipeline	include/PipelineManager.hpp	/^  VkPipeline pipeline;$/;"	m	class:PipelineManager	typeref:typename:VkPipeline
pipeline	include/VkZero/Internal/graphics_pipeline_internal.hpp	/^  VkPipeline pipeline = VK_NULL_HANDLE;$/;"	m	struct:VkZero::GraphicsPipelineImpl_T	typeref:typename:VkPipeline
pipeline	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkPipeline pipeline = VK_NULL_HANDLE;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkPipeline
pipeline	include/VkZero/render_pass.hpp	/^  Pipeline &pipeline;$/;"	m	struct:VkZero::RaytracingRenderPassPipeline	typeref:typename:Pipeline &
pipelineInfo	include/VkZero/Internal/graphics_pipeline_internal.hpp	/^  VkGraphicsPipelineCreateInfo pipelineInfo{};$/;"	m	struct:VkZero::GraphicsPipelineImpl_T	typeref:typename:VkGraphicsPipelineCreateInfo
pipelineInfo	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkRayTracingPipelineCreateInfoKHR pipelineInfo{};$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkRayTracingPipelineCreateInfoKHR
pipelineLayout	include/PipelineManager.hpp	/^  VkPipelineLayout pipelineLayout;$/;"	m	class:PipelineManager	typeref:typename:VkPipelineLayout
pipelineLayout	include/VkZero/Internal/graphics_pipeline_internal.hpp	/^  VkPipelineLayout pipelineLayout;$/;"	m	struct:VkZero::GraphicsPipelineImpl_T	typeref:typename:VkPipelineLayout
pipelineLayout	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkPipelineLayout pipelineLayout;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkPipelineLayout
pipelines	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  std::vector<GraphicsPipelineImpl_T *> pipelines;$/;"	m	struct:VkZero::GraphicsRenderpassImpl_T	typeref:typename:std::vector<GraphicsPipelineImpl_T * >
pipelines	include/VkZero/Internal/raytracing_renderpass_internal.hpp	/^      pipelines;$/;"	m	struct:VkZero::RaytracingRenderpassImpl_T	typeref:typename:std::vector<std::pair<RaytracingPipelineImpl_T *,PushConstantDataImpl_T * >>
pitch	include/Camera.hpp	/^  float pitch = 0.0f; \/\/ Rotation around the X-axis (up\/down)$/;"	m	class:Camera	typeref:typename:float
pollEvents	src/VkZero/window.cpp	/^void WindowImpl_T::pollEvents() {$/;"	f	class:WindowImpl_T	typeref:typename:void
pool	include/VkZero/descriptor_pool.hpp	/^        VkDescriptorPool pool;$/;"	m	class:VkZero::DescriptorPool	typeref:typename:VkDescriptorPool
populateDebugMessengerCreateInfo	src/VkZero/core.cpp	/^void VkZeroCoreImpl_T::populateDebugMessengerCreateInfo($/;"	f	class:VkZeroCoreImpl_T	typeref:typename:void
pos	src/Camera.cpp	/^    float &pos;$/;"	m	struct:Camera::update::__anona64332f60108	typeref:typename:float &	file:
position	include/VoxelWorld.hpp	/^    glm::ivec3 position;$/;"	m	struct:VoxelWorld::VoxelChunk	typeref:typename:glm::ivec3
present	include/VkZero/Internal/window_internal.hpp	/^  bool present(uint32_t &imageIndex, VkSemaphore &signalSemaphore) {$/;"	f	struct:VkZero::WindowImpl_T	typeref:typename:bool
presentFamily	include/VkZero/Internal/core_internal.hpp	/^    std::optional<uint32_t> presentFamily;$/;"	m	struct:VkZero::QueueFamilyIndices	typeref:typename:std::optional<uint32_t>
presentFamily	include/VkZero/context.hpp	/^    std::optional<uint32_t> presentFamily;$/;"	m	struct:VkZero::QueueFamilyIndices	typeref:typename:std::optional<uint32_t>
presentModes	include/VkZero/Internal/image_internal.hpp	/^      std::vector<VkPresentModeKHR> presentModes;$/;"	m	struct:VkZero::SwapChainSupportDetails	typeref:typename:std::vector<VkPresentModeKHR>
presentModes	include/VkZero/Internal/window_internal.hpp	/^    std::vector<VkPresentModeKHR> presentModes;$/;"	m	struct:VkZero::WindowImpl_T::SwapChainSupportDetails	typeref:typename:std::vector<VkPresentModeKHR>
presentQueue	include/VkZero/Internal/core_internal.hpp	/^    VkQueue presentQueue;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkQueue
presentQueue	include/VkZero/context.hpp	/^    VkQueue presentQueue;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:VkQueue
processKeyboardInput	src/Camera.cpp	/^void Camera::processKeyboardInput(int key, float deltaTime) {}$/;"	f	class:Camera	typeref:typename:void
processMouseMovement	src/Camera.cpp	/^void Camera::processMouseMovement(float xoffset, float yoffset) {}$/;"	f	class:Camera	typeref:typename:void
proj	include/Camera.hpp	/^  glm::mat4 proj;$/;"	m	struct:TransformUBO	typeref:typename:glm::mat4
pushConstantData	include/VkZero/render_pass.hpp	/^  PushConstant &pushConstantData;$/;"	m	struct:VkZero::RaytracingRenderPassPipeline	typeref:typename:PushConstant &
pushConstants	include/PipelineManager.hpp	/^  PipelineShaderPushConstant pushConstants;$/;"	m	class:PipelineManager	typeref:typename:PipelineShaderPushConstant
push_constant_compatibility_validator	include/VkZero/shader_group.hpp	/^struct push_constant_compatibility_validator<Shader,$/;"	s	namespace:VkZero::ShaderGroupDetails
push_constant_extractor	include/VkZero/shader.hpp	/^        struct push_constant_extractor<std::tuple<First, Rest...>> {$/;"	s	namespace:VkZero::ShaderDetails
querySwapChainSupport	src/VkZero/window.cpp	/^WindowImpl_T::SwapChainSupportDetails WindowImpl_T::querySwapChainSupport(VkPhysicalDevice devic/;"	f	class:WindowImpl_T	typeref:typename:WindowImpl_T::SwapChainSupportDetails
queueCond	include/VoxelWorld.hpp	/^  std::condition_variable queueCond;$/;"	m	class:VoxelWorld	typeref:typename:std::condition_variable
queueFamilyIndices	include/VkZero/Internal/core_internal.hpp	/^    QueueFamilyIndices queueFamilyIndices;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:QueueFamilyIndices
queueFamilyIndices	include/VkZero/context.hpp	/^    QueueFamilyIndices queueFamilyIndices;$/;"	m	struct:VkZero::VkZeroCoreImpl_T	typeref:typename:QueueFamilyIndices
queueMutex	include/VoxelWorld.hpp	/^  std::mutex queueMutex;$/;"	m	class:VoxelWorld	typeref:typename:std::mutex
ranges	include/VkZero/Internal/shader_group_internal.hpp	/^  std::vector<VkPushConstantRange> ranges;$/;"	m	struct:VkZero::ShaderPushConstantsImpl_T	typeref:typename:std::vector<VkPushConstantRange>
rayCast	src/Camera.cpp	/^glm::ivec3 Camera::rayCast(std::unique_ptr<VoxelWorld> &voxelWorld,$/;"	f	class:Camera	typeref:typename:glm::ivec3
rayIntersectsCube	src/Camera.cpp	/^bool Camera::rayIntersectsCube(glm::vec3 corner, float size,$/;"	f	class:Camera	typeref:typename:bool
raygenRegion	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkStridedDeviceAddressRegionKHR raygenRegion;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkStridedDeviceAddressRegionKHR
raytracingCommandBuffers	include/Engine.hpp	/^  static std::vector<VkCommandBuffer> raytracingCommandBuffers;$/;"	m	class:VoxelEngine	typeref:typename:std::vector<VkCommandBuffer>
raytracingCommandBuffers	src/Engine.cpp	/^std::vector<VkCommandBuffer> VoxelEngine::raytracingCommandBuffers;$/;"	m	class:VoxelEngine	typeref:typename:std::vector<VkCommandBuffer>
raytracingDescriptorSetLayout	include/Raytracer.hpp	/^  VkDescriptorSetLayout raytracingDescriptorSetLayout;$/;"	m	class:Raytracer	typeref:typename:VkDescriptorSetLayout
raytracingDescriptorSets	include/Raytracer.hpp	/^  std::vector<VkDescriptorSet> raytracingDescriptorSets;$/;"	m	class:Raytracer	typeref:typename:std::vector<VkDescriptorSet>
raytracingLightStorageImageW	include/Raytracer.hpp	/^  VkZero::SwapImage raytracingLightStorageImageW;$/;"	m	class:Raytracer	typeref:typename:VkZero::SwapImage
raytracingLightStorageImageW	include/VkZeroObjects.hpp	/^  VkZero::SwapImage raytracingLightStorageImageW;$/;"	m	class:VkZeroObjects	typeref:typename:VkZero::SwapImage
raytracingLightStorageImageX	include/Raytracer.hpp	/^  VkZero::SwapImage raytracingLightStorageImageX;$/;"	m	class:Raytracer	typeref:typename:VkZero::SwapImage
raytracingLightStorageImageX	include/VkZeroObjects.hpp	/^  VkZero::SwapImage raytracingLightStorageImageX;$/;"	m	class:VkZeroObjects	typeref:typename:VkZero::SwapImage
raytracingLightStorageImageY	include/Raytracer.hpp	/^  VkZero::SwapImage raytracingLightStorageImageY;$/;"	m	class:Raytracer	typeref:typename:VkZero::SwapImage
raytracingLightStorageImageY	include/VkZeroObjects.hpp	/^  VkZero::SwapImage raytracingLightStorageImageY;$/;"	m	class:VkZeroObjects	typeref:typename:VkZero::SwapImage
raytracingLightStorageImageZ	include/Raytracer.hpp	/^  VkZero::SwapImage raytracingLightStorageImageZ;$/;"	m	class:Raytracer	typeref:typename:VkZero::SwapImage
raytracingLightStorageImageZ	include/VkZeroObjects.hpp	/^  VkZero::SwapImage raytracingLightStorageImageZ;$/;"	m	class:VkZeroObjects	typeref:typename:VkZero::SwapImage
raytracingPipeline	include/Raytracer.hpp	/^  VkPipeline raytracingPipeline;$/;"	m	class:Raytracer	typeref:typename:VkPipeline
raytracingPipeline	include/VkZeroObjects.hpp	/^  RaytracingPipeline raytracingPipeline;  $/;"	m	class:VkZeroObjects	typeref:typename:RaytracingPipeline
raytracingPipelineLayout	include/Raytracer.hpp	/^  VkPipelineLayout raytracingPipelineLayout;$/;"	m	class:Raytracer	typeref:typename:VkPipelineLayout
raytracingPositionStorageImage	include/Raytracer.hpp	/^  VkZero::SwapImage raytracingPositionStorageImage;$/;"	m	class:Raytracer	typeref:typename:VkZero::SwapImage
raytracingPositionStorageImage	include/VkZeroObjects.hpp	/^  VkZero::SwapImage raytracingPositionStorageImage;$/;"	m	class:VkZeroObjects	typeref:typename:VkZero::SwapImage
raytracingPushConstantData	include/VkZeroObjects.hpp	/^  RaytracingPushConstantData raytracingPushConstantData;$/;"	m	class:VkZeroObjects	typeref:typename:RaytracingPushConstantData
raytracingPushConstants	include/Raytracer.hpp	/^  RaytracingPushConstants raytracingPushConstants;$/;"	m	class:Raytracer	typeref:typename:RaytracingPushConstants
raytracingPushConstants	include/VkZeroObjects.hpp	/^  RaytracingPushConstants raytracingPushConstants;$/;"	m	class:VkZeroObjects	typeref:typename:RaytracingPushConstants
raytracingRenderPass	include/VkZeroObjects.hpp	/^  RaytracingRenderPass_t raytracingRenderPass;$/;"	m	class:VkZeroObjects	typeref:typename:RaytracingRenderPass_t
raytracingResourceSet	include/VkZeroObjects.hpp	/^  RaytracingResourceSet raytracingResourceSet;$/;"	m	class:VkZeroObjects	typeref:typename:RaytracingResourceSet
raytracingShaderGroup	include/VkZeroObjects.hpp	/^  RaytracingShaderGroup raytracingShaderGroup;$/;"	m	class:VkZeroObjects	typeref:typename:RaytracingShaderGroup
raytracingStorageImage	include/Raytracer.hpp	/^  VkZero::SwapImage raytracingStorageImage;$/;"	m	class:Raytracer	typeref:typename:VkZero::SwapImage
raytracingStorageImage	include/VkZeroObjects.hpp	/^  VkZero::SwapImage raytracingStorageImage;$/;"	m	class:VkZeroObjects	typeref:typename:VkZero::SwapImage
readFile	src/VkZero/resource_manager.cpp	/^std::vector<char> ResourceManager::readFile(const std::string &filename) {$/;"	f	class:ResourceManager	typeref:typename:std::vector<char>
record	src/VkZero/graphics_renderpass.cpp	/^void GraphicsRenderpassImpl_T::record(VkCommandBuffer commandBuffer,$/;"	f	class:GraphicsRenderpassImpl_T	typeref:typename:void
record	src/VkZero/raytracing_renderpass.cpp	/^void RaytracingRenderpassImpl_T::record(VkCommandBuffer commandBuffer,$/;"	f	class:RaytracingRenderpassImpl_T	typeref:typename:void
recordCommandBuffer	src/Engine.cpp	/^  void VoxelEngine::recordCommandBuffer(VkCommandBuffer commandBuffer, uint32_t imageIndex) {$/;"	f	class:VoxelEngine	typeref:typename:void
recordRaytracingCommandBuffer	src/Raytracer.cpp	/^void Raytracer::recordRaytracingCommandBuffer(VkCommandBuffer commandBuffer,$/;"	f	class:Raytracer	typeref:typename:void
recordRaytracingCommandBuffer	src/VkZeroObjects.cpp	/^void VkZeroObjects::recordRaytracingCommandBuffer(VkCommandBuffer commandBuffer,$/;"	f	class:VkZeroObjects	typeref:typename:void
recreateFramebuffers	src/PipelineManager.cpp	/^void PipelineManager::recreateFramebuffers(std::unique_ptr<VkZero::Window>& window) {$/;"	f	class:PipelineManager	typeref:typename:void
recreateSwapchain	include/VkZero/Internal/raytracing_renderpass_internal.hpp	/^  void recreateSwapchain(WindowImpl_T* window) override {}$/;"	f	struct:VkZero::RaytracingRenderpassImpl_T	typeref:typename:void
recreateSwapchain	src/VkZero/graphics_renderpass.cpp	/^void GraphicsRenderpassImpl_T::recreateSwapchain(WindowImpl_T* window) {$/;"	f	class:GraphicsRenderpassImpl_T	typeref:typename:void
recreateSwapchain	src/VkZero/window.cpp	/^void WindowImpl_T::recreateSwapchain() {$/;"	f	class:WindowImpl_T	typeref:typename:void
recreateWindow	src/VkZero/window.cpp	/^void WindowImpl_T::recreateWindow() {$/;"	f	class:WindowImpl_T	typeref:typename:void
renderFinishedSemaphores	include/SyncManager.hpp	/^  std::vector<VkSemaphore> renderFinishedSemaphores;$/;"	m	class:SyncManager	typeref:typename:std::vector<VkSemaphore>
renderFinishedSemaphores	include/VkZero/frame.hpp	/^  std::vector<VkSemaphore> renderFinishedSemaphores;$/;"	m	struct:VkZero::frameImpl_T	typeref:typename:std::vector<VkSemaphore>
renderPass	include/PipelineManager.hpp	/^  PipelineRenderPass renderPass;$/;"	m	class:PipelineManager	typeref:typename:PipelineRenderPass
renderPass	include/Raytracer.hpp	/^  RaytracingRenderPass_t renderPass;$/;"	m	class:Raytracer	typeref:typename:RaytracingRenderPass_t
renderPass	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  VkRenderPass renderPass;$/;"	m	struct:VkZero::GraphicsRenderpassImpl_T	typeref:typename:VkRenderPass
renderpass	include/PipelineManager.hpp	/^  VkRenderPass renderpass;$/;"	m	class:PipelineManager	typeref:typename:VkRenderPass
renderpasses	include/VkZero/frame.hpp	/^  std::vector<RenderpassImpl_T *> renderpasses;$/;"	m	struct:VkZero::frameImpl_T	typeref:typename:std::vector<RenderpassImpl_T * >
requestChunk	src/VoxelWorld.cpp	/^void VoxelWorld::requestChunk(uint16_t chunkID, float priority) {$/;"	f	class:VoxelWorld	typeref:typename:void
resourceType	include/VkZero/binding.hpp	/^  using resourceType = Resource *;$/;"	t	struct:VkZero::ResourceBinding	typeref:typename:Resource *
resource_matches	include/VkZero/graphics_pipeline.hpp	/^constexpr bool resource_matches() {$/;"	f	namespace:VkZero::PipelineDetails	typeref:typename:bool
resources	include/VkZero/Internal/binding_internal.hpp	/^  std::vector<BindResource *> resources;$/;"	m	struct:VkZero::ResourceBindingImpl_T	typeref:typename:std::vector<BindResource * >
resources	include/VkZero/Internal/graphics_pipeline_internal.hpp	/^  std::vector<ShaderResourceSetImpl_T *> resources;$/;"	m	struct:VkZero::GraphicsPipelineImpl_T	typeref:typename:std::vector<ShaderResourceSetImpl_T * >
resources	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  std::unordered_map<std::string, RenderPassResourceImpl_T *> resources;$/;"	m	struct:VkZero::RenderPassResourceSetImpl_T	typeref:typename:std::unordered_map<std::string,RenderPassResourceImpl_T * >
resources	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  std::vector<ShaderResourceSetImpl_T *> resources;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:std::vector<ShaderResourceSetImpl_T * >
resources	src/VkZero/binding.cpp	/^  std::vector<BindResource *> resources;$/;"	v	typeref:typename:std::vector<BindResource * >
run	Makefile	/^run:$/;"	t
run	src/Engine.cpp	/^void VoxelEngine::run() {$/;"	f	class:VoxelEngine	typeref:typename:void
same_count	include/VkZero/shader_group.hpp	/^    static constexpr bool same_count =$/;"	m	struct:VkZero::ShaderGroupDetails::shader_binding_validator::binding_compatibility_checker	typeref:typename:bool
same_slot	include/VkZero/shader_group.hpp	/^    static constexpr bool same_slot =$/;"	m	struct:VkZero::ShaderGroupDetails::shader_binding_validator::binding_compatibility_checker	typeref:typename:bool
same_type	include/VkZero/shader_group.hpp	/^    static constexpr bool same_type = A::type() == B::type();$/;"	m	struct:VkZero::ShaderGroupDetails::shader_binding_validator::binding_compatibility_checker	typeref:typename:bool
sampler	include/VkZero/Internal/image_internal.hpp	/^        VkSampler sampler;$/;"	m	struct:VkZero::ImageImpl_T	typeref:typename:VkSampler
sbtBuffer	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkBuffer sbtBuffer;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkBuffer
sbtMemory	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkDeviceMemory sbtMemory;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkDeviceMemory
sbtSize	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  VkDeviceSize sbtSize;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:VkDeviceSize
section	include/Engine.hpp	/^  static uint8_t section;$/;"	m	class:VoxelEngine	typeref:typename:uint8_t
section	src/Engine.cpp	/^uint8_t VoxelEngine::section = 0;$/;"	m	class:VoxelEngine	typeref:typename:uint8_t
semiRandomFloat	include/Engine.hpp	/^static float semiRandomFloat(float x, float y, float z) {$/;"	f	typeref:typename:float
set1	include/PipelineManager.hpp	/^  PipelineShaderResources set1;$/;"	m	class:PipelineManager	typeref:typename:PipelineShaderResources
set1	include/Raytracer.hpp	/^  RaytracingResourceSet set1;$/;"	m	class:Raytracer	typeref:typename:RaytracingResourceSet
set2	include/PipelineManager.hpp	/^  PipelineRenderPassResources set2;$/;"	m	class:PipelineManager	typeref:typename:PipelineRenderPassResources
setupDebugMessenger	src/VkZero/core.cpp	/^void VkZeroCoreImpl_T::setupDebugMessenger() {$/;"	f	class:VkZeroCoreImpl_T	typeref:typename:void
shaderInfo	include/VkZero/Internal/shader_internal.hpp	/^        VkPipelineShaderStageCreateInfo shaderInfo {};$/;"	m	struct:VkZero::ShaderImpl_T	typeref:typename:VkPipelineShaderStageCreateInfo
shaderModule	include/VkZero/Internal/shader_internal.hpp	/^        VkShaderModule shaderModule;$/;"	m	struct:VkZero::ShaderImpl_T	typeref:typename:VkShaderModule
shaderStages	include/VkZero/shader_group.hpp	/^  static constexpr int shaderStages = ShaderStages;$/;"	m	struct:VkZero::PushConstant	typeref:typename:int
shaderStages	include/VkZero/shader_group.hpp	/^  uint32_t shaderStages;$/;"	m	struct:VkZero::ShaderPushConstantData	typeref:typename:uint32_t
shader_binding_validator	include/VkZero/shader_group.hpp	/^template <typename... Shaders> struct shader_binding_validator {$/;"	s	namespace:VkZero::ShaderGroupDetails
shader_binding_validity_checker	include/VkZero/graphics_pipeline.hpp	/^constexpr bool shader_binding_validity_checker() {$/;"	f	namespace:VkZero::PipelineDetails	typeref:typename:bool
shader_group_validity_checker	include/VkZero/graphics_pipeline.hpp	/^constexpr bool shader_group_validity_checker() {$/;"	f	namespace:VkZero::PipelineDetails	typeref:typename:bool
shader_index	include/VkZero/shader_library.hpp	/^    struct shader_index<Name, First, Rest...> {$/;"	s	namespace:VkZero
shader_index	include/VkZero/shader_library.hpp	/^    struct shader_index<Name> {$/;"	s	namespace:VkZero
shaders	include/Engine.hpp	/^  static std::unique_ptr<GlobalShaderLibrary> shaders;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<GlobalShaderLibrary>
shaders	include/VkZero/shader_group.hpp	/^    using shaders = std::tuple<Shaders...>;$/;"	t	class:VkZero::ShaderGroup	typeref:typename:std::tuple<Shaders...>
shaders	include/VkZero/shader_library.hpp	/^        std::tuple<Shaders...> shaders;$/;"	m	class:VkZero::ShaderLibrary	typeref:typename:std::tuple<Shaders...>
shaders	src/Engine.cpp	/^std::unique_ptr<GlobalShaderLibrary> VoxelEngine::shaders;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<GlobalShaderLibrary>
shift	src/Camera.cpp	/^    int lowerBound, upperBound, offset, modValue, shift;$/;"	m	struct:Camera::update::__anona64332f60108	typeref:typename:int	file:
shouldClose	src/VkZero/window.cpp	/^bool WindowImpl_T::shouldClose() const {$/;"	f	class:WindowImpl_T	typeref:typename:bool
showCursor	src/VkZero/window.cpp	/^void Window::showCursor() {$/;"	f	class:Window	typeref:typename:void
something	include/PipelineManager.hpp	/^  Pipeline something;$/;"	m	class:PipelineManager	typeref:typename:Pipeline
something	include/Raytracer.hpp	/^  Pipeline something;  $/;"	m	class:Raytracer	typeref:typename:Pipeline
sortChunks	src/VoxelWorld.cpp	/^void VoxelWorld::sortChunks() {$/;"	f	class:VoxelWorld	typeref:typename:void
stages	include/VkZero/Internal/binding_internal.hpp	/^  VkShaderStageFlags stages;$/;"	m	struct:VkZero::ResourceBindingImpl_T	typeref:typename:VkShaderStageFlags
stages	src/VkZero/binding.cpp	/^  VkShaderStageFlags stages;$/;"	v	typeref:typename:VkShaderStageFlags
staging	include/VkZero/image.hpp	/^        StagingData staging[MaxImageCount];$/;"	m	class:VkZero::StagedImageBase	typeref:typename:StagingData[]
startWorkers	src/VoxelWorld.cpp	/^void VoxelWorld::startWorkers(int numThreads) {$/;"	f	class:VoxelWorld	typeref:typename:void
stopThreads	include/VoxelWorld.hpp	/^  bool stopThreads = false;$/;"	m	class:VoxelWorld	typeref:typename:bool
stopWorkers	src/VoxelWorld.cpp	/^void VoxelWorld::stopWorkers() {$/;"	f	class:VoxelWorld	typeref:typename:void
structureSize	include/VkZero/shader_group.hpp	/^  uint32_t structureSize;$/;"	m	struct:VkZero::ShaderPushConstantData	typeref:typename:uint32_t
surface	include/VkZero/Internal/window_internal.hpp	/^  VkSurfaceKHR surface;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:VkSurfaceKHR
swapChain	include/VkZero/Internal/window_internal.hpp	/^  VkSwapchainKHR swapChain;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:VkSwapchainKHR
swapChainExtent	include/VkZero/Internal/window_internal.hpp	/^  VkExtent2D swapChainExtent;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:VkExtent2D
swapChainImageFormat	include/VkZero/Internal/window_internal.hpp	/^  VkFormat swapChainImageFormat;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:VkFormat
swapchainImageCount	include/VkZero/Internal/window_internal.hpp	/^  uint32_t swapchainImageCount;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:uint32_t
swapchainImages	include/VkZero/Internal/window_internal.hpp	/^  AttachmentImage swapchainImages;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:AttachmentImage
syncManager	include/Engine.hpp	/^  static std::unique_ptr<class SyncManager> syncManager;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<class SyncManager>
syncManager	src/Engine.cpp	/^std::unique_ptr<SyncManager> VoxelEngine::syncManager;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<SyncManager>
tail	include/VkZero/render_pass.hpp	/^  using tail = typename filter_preserve_input<std::tuple<Rest...>, All>::type;$/;"	t	struct:VkZero::RenderPassDetails::filter_preserve_input	typeref:typename:filter_preserve_input<std::tuple<Rest...>,All>::type
transitionImageLayout	src/VkZero/image.cpp	/^void transitionImageLayout(VkCommandBuffer commandBuffer,$/;"	f	typeref:typename:void
transitionImageLayout	src/VkZero/image.cpp	/^void transitionImageLayout(std::unique_ptr<CommandManager> &commandManager,$/;"	f	typeref:typename:void
tuple_compatibility_checker	include/VkZero/shader_group.hpp	/^  struct tuple_compatibility_checker<std::tuple<Ts...>> {$/;"	s	struct:VkZero::ShaderGroupDetails::shader_binding_validator
tuple_for_each	include/VkZero/render_pass.hpp	/^constexpr void tuple_for_each(Tuple &&t, Func &&f) {$/;"	f	namespace:VkZero	typeref:typename:void
tuple_for_each_impl	include/VkZero/render_pass.hpp	/^constexpr void tuple_for_each_impl(Tuple &&t, Func &&f,$/;"	f	namespace:VkZero	typeref:typename:void
tuple_push_back	include/VkZero/render_pass.hpp	/^struct tuple_push_back<std::tuple<Ts...>, T> {$/;"	s	namespace:VkZero::RenderPassDetails
type	include/VkZero/Internal/binding_internal.hpp	/^  VkDescriptorType type;$/;"	m	struct:VkZero::ResourceBindingImpl_T	typeref:typename:VkDescriptorType
type	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  int type;$/;"	m	struct:VkZero::AttachmentImpl_T	typeref:typename:int
type	include/VkZero/binding.hpp	/^    using type = typename std::conditional_t<$/;"	t	struct:VkZero::CombinedBindings::filter_duplicates
type	include/VkZero/binding.hpp	/^  static constexpr VkDescriptorType type() { return ResourceType; }$/;"	f	struct:VkZero::ResourceBinding	typeref:typename:VkDescriptorType
type	include/VkZero/binding.hpp	/^  static constexpr VkDescriptorType type() { return ResourceType; }$/;"	f	struct:VkZero::ShaderBinding	typeref:typename:VkDescriptorType
type	include/VkZero/binding.hpp	/^  using type = typename filter_duplicates<AllBindings>::type;$/;"	t	struct:VkZero::CombinedBindings	typeref:typename:filter_duplicates<AllBindings>::type
type	include/VkZero/binding.hpp	/^  using type = typename std::conditional_t<$/;"	t	struct:VkZero::find_binding
type	include/VkZero/render_pass.hpp	/^    using type = ColorAttachment<N, F, Start>;$/;"	t	struct:VkZero::RenderPassDetails::assign_global_locations::update_location	typeref:typename:ColorAttachment<N,F,Start>
type	include/VkZero/render_pass.hpp	/^    using type = DepthAttachment<N, F, Start>;$/;"	t	struct:VkZero::RenderPassDetails::assign_global_locations::update_location	typeref:typename:DepthAttachment<N,F,Start>
type	include/VkZero/render_pass.hpp	/^    using type = InputAttachment<N, F, Start>;$/;"	t	struct:VkZero::RenderPassDetails::assign_global_locations::update_location	typeref:typename:InputAttachment<N,F,Start>
type	include/VkZero/render_pass.hpp	/^    using type = T;$/;"	t	struct:VkZero::RenderPassDetails::assign_global_locations::update_location	typeref:typename:T
type	include/VkZero/render_pass.hpp	/^  using type = decltype(std::tuple_cat($/;"	t	struct:VkZero::RenderPassDetails::assign_global_locations
type	include/VkZero/render_pass.hpp	/^  using type = std::conditional_t<$/;"	t	struct:VkZero::RenderPassDetails::filter_preserve_input
type	include/VkZero/render_pass.hpp	/^  using type = std::tuple<Ts..., T>;$/;"	t	struct:VkZero::RenderPassDetails::tuple_push_back	typeref:typename:std::tuple<Ts...,T>
type	include/VkZero/shader.hpp	/^            using type = std::conditional_t<$/;"	t	struct:VkZero::ShaderDetails::attachments_extractor	typeref:typename:std::conditional_t<is_attachments_type<First>::value,First,typename attachments_extractor<std::tuple<Rest...>>::type>
type	include/VkZero/shader.hpp	/^            using type = std::conditional_t<$/;"	t	struct:VkZero::ShaderDetails::bindings_extractor	typeref:typename:std::conditional_t<is_bindings_type<First>::value,First,typename bindings_extractor<std::tuple<Rest...>>::type>
type	include/VkZero/shader.hpp	/^            using type = std::conditional_t<$/;"	t	struct:VkZero::ShaderDetails::push_constant_extractor	typeref:typename:std::conditional_t<is_push_constant_type<First>::value,First,typename push_constant_extractor<std::tuple<Rest...>>::type>
type	src/VkZero/binding.cpp	/^  VkDescriptorType type;$/;"	v	typeref:typename:VkDescriptorType
type	src/VkZero/descriptor_pool.cpp	/^    using type = decltype($/;"	t	struct:DescriptorTypes	file:
type	src/VkZero/descriptor_pool.cpp	/^    using type = decltype($/;"	t	struct:get_shader_bindings	file:
type	src/VkZero/descriptor_pool.cpp	/^    using type = std::conditional_t<$/;"	t	struct:unique_types	file:
types	include/VkZero/shader_library.hpp	/^        using types = std::tuple<Shaders...>;$/;"	t	class:VkZero::ShaderLibrary	typeref:typename:std::tuple<Shaders...>
types	src/VkZero/descriptor_pool.cpp	/^    using types = typename unique_types<DescriptorTypes<get_shader_bindings<GlobalShaderLibrary:/;"	t	function:DescriptorPool::DescriptorPool	typeref:typename:unique_types<DescriptorTypes<get_shader_bindings<GlobalShaderLibrary::types>::type>::type>::type	file:
ubo	include/Camera.hpp	/^  TransformUBO ubo{};$/;"	m	class:Camera	typeref:typename:TransformUBO
uniformBuffer	include/Camera.hpp	/^  std::vector<VkBuffer> uniformBuffer;$/;"	m	class:Camera	typeref:typename:std::vector<VkBuffer>
uniformBufferMemory	include/Camera.hpp	/^  std::vector<VkDeviceMemory> uniformBufferMemory;$/;"	m	class:Camera	typeref:typename:std::vector<VkDeviceMemory>
uniformBuffersMapped	include/Camera.hpp	/^  std::vector<void *> uniformBuffersMapped;$/;"	m	class:Camera	typeref:typename:std::vector<void * >
unique_types	src/VkZero/descriptor_pool.cpp	/^struct unique_types<std::tuple<First, Rest...>> {$/;"	s	file:
update	src/Camera.cpp	/^void Camera::update(std::unique_ptr<VkZero::Window> &Window,$/;"	f	class:Camera	typeref:typename:void
updateVoxelChunkMap	src/VoxelWorld.cpp	/^void VoxelWorld::updateVoxelChunkMap(int modValue, int offset) {$/;"	f	class:VoxelWorld	typeref:typename:void
updateVoxels	src/VoxelWorld.cpp	/^void VoxelWorld::updateVoxels(VkCommandBuffer commandBuffer,$/;"	f	class:VoxelWorld	typeref:typename:void
update_location	include/VkZero/render_pass.hpp	/^  struct update_location<ColorAttachment<N, F, L>> {$/;"	s	struct:VkZero::RenderPassDetails::assign_global_locations
update_location	include/VkZero/render_pass.hpp	/^  struct update_location<DepthAttachment<N, F, L>> {$/;"	s	struct:VkZero::RenderPassDetails::assign_global_locations
update_location	include/VkZero/render_pass.hpp	/^  struct update_location<InputAttachment<N, F, L>> {$/;"	s	struct:VkZero::RenderPassDetails::assign_global_locations
update_location	include/VkZero/render_pass.hpp	/^  template <typename T> struct update_location {$/;"	s	struct:VkZero::RenderPassDetails::assign_global_locations
upperBound	src/Camera.cpp	/^    int lowerBound, upperBound, offset, modValue, shift;$/;"	m	struct:Camera::update::__anona64332f60108	typeref:typename:int	file:
validationLayers	src/VkZero/core.cpp	/^const std::vector<const char *> validationLayers = {$/;"	v	typeref:typename:const std::vector<const char * >
value	include/VkZero/binding.hpp	/^  static constexpr bool value =$/;"	m	struct:VkZero::has_binding	typeref:typename:bool
value	include/VkZero/fixed_string.hpp	/^  char value[N] = {};$/;"	m	struct:VkZero::FixedString	typeref:typename:char[]
value	include/VkZero/render_pass.hpp	/^  using value = decltype(std::tuple_cat($/;"	t	struct:VkZero::RenderPassDetails::get_all_attachments
value	include/VkZero/render_pass.hpp	/^  using value = typename assign_global_locations<filtered>::type;$/;"	t	struct:VkZero::RenderPassDetails::get_common_attachments	typeref:typename:assign_global_locations<filtered>::type
value	include/VkZero/shader.hpp	/^            static constexpr bool value = $/;"	m	struct:VkZero::ShaderDetails::duplicate_binding_checker	typeref:typename:bool
value	include/VkZero/shader.hpp	/^            static constexpr bool value = false;$/;"	m	struct:VkZero::ShaderDetails::duplicate_binding_checker	typeref:typename:bool
value	include/VkZero/shader_group.hpp	/^    static constexpr bool value = !same_slot || (same_type && same_count);$/;"	m	struct:VkZero::ShaderGroupDetails::shader_binding_validator::binding_compatibility_checker	typeref:typename:bool
value	include/VkZero/shader_group.hpp	/^    static constexpr bool value = pairwise_compatibility_checker<Ts...>::value;$/;"	m	struct:VkZero::ShaderGroupDetails::shader_binding_validator::tuple_compatibility_checker	typeref:typename:bool
value	include/VkZero/shader_group.hpp	/^    static constexpr bool value = true; \/\/ Empty pack or single element is fine$/;"	m	struct:VkZero::ShaderGroupDetails::shader_binding_validator::pairwise_compatibility_checker	typeref:typename:bool
value	include/VkZero/shader_group.hpp	/^    static constexpr bool value =$/;"	m	struct:VkZero::ShaderGroupDetails::shader_binding_validator::pairwise_compatibility_checker	typeref:typename:bool
value	include/VkZero/shader_group.hpp	/^  static constexpr bool value =$/;"	m	struct:VkZero::ShaderGroupDetails::push_constant_compatibility_validator	typeref:typename:bool
value	include/VkZero/shader_group.hpp	/^  static constexpr bool value =$/;"	m	struct:VkZero::ShaderGroupDetails::shader_binding_validator	typeref:typename:bool
value	include/VkZero/shader_group.hpp	/^  using value = decltype(std::tuple_cat($/;"	t	struct:VkZero::ShaderGroupDetails::attachment_collector
value	include/VkZero/shader_library.hpp	/^        static constexpr int value = -1;$/;"	m	struct:VkZero::shader_index	typeref:typename:int
value	include/VkZero/shader_library.hpp	/^        static constexpr int value = matches ? 0 : (1 + shader_index<Name, Rest...>::value);$/;"	m	struct:VkZero::shader_index	typeref:typename:int
value	include/VkZero/shader_resource_set.hpp	/^  static constexpr bool value = false;$/;"	m	struct:VkZero::ShaderResourceSetDetails::duplicate_binding_number_checker	typeref:typename:bool
value	include/VkZero/shader_resource_set.hpp	/^  static constexpr bool value =$/;"	m	struct:VkZero::ShaderResourceSetDetails::duplicate_binding_number_checker	typeref:typename:bool
value	src/VkZero/descriptor_pool.cpp	/^    static constexpr VkDescriptorType value = Type;$/;"	m	struct:DescriptorTypeObject	typeref:typename:VkDescriptorType	file:
view	include/Camera.hpp	/^  glm::mat4 view;$/;"	m	struct:TransformUBO	typeref:typename:glm::mat4
view	include/VkZero/Internal/image_internal.hpp	/^        VkImageView view;$/;"	m	struct:VkZero::ImageData_T	typeref:typename:VkImageView
vkCmdTraceRaysKHR	include/VkZero/Internal/raytracing_renderpass_internal.hpp	/^  PFN_vkCmdTraceRaysKHR vkCmdTraceRaysKHR;$/;"	m	struct:VkZero::RaytracingRenderpassImpl_T	typeref:typename:PFN_vkCmdTraceRaysKHR
vkZero_core	src/VkZero/core.cpp	/^VkZeroCoreImpl_T* VkZero::vkZero_core = NULL;/;"	m	class:VkZero	typeref:typename:VkZeroCoreImpl_T *
vox	src/VoxelWorld.cpp	/^#define vox(/;"	d	file:
voxChunk	src/Camera.cpp	/^#define voxChunk(/;"	d	file:
voxChunk	src/VoxelWorld.cpp	/^#define voxChunk(/;"	d	file:
voxelChunkMapData	include/VoxelWorld.hpp	/^  uint16_t *voxelChunkMapData;$/;"	m	class:VoxelWorld	typeref:typename:uint16_t *
voxelChunkMapImage	include/VoxelWorld.hpp	/^  VkZero::StagedSharedImage voxelChunkMapImage;$/;"	m	class:VoxelWorld	typeref:typename:VkZero::StagedSharedImage
voxelData	include/VoxelWorld.hpp	/^  std::vector<VoxelChunk> voxelData;$/;"	m	class:VoxelWorld	typeref:typename:std::vector<VoxelChunk>
voxelImages	include/VoxelWorld.hpp	/^  std::vector<VkZero::StagedSharedImage> voxelImages;$/;"	m	class:VoxelWorld	typeref:typename:std::vector<VkZero::StagedSharedImage>
voxelWorld	include/Engine.hpp	/^  static std::unique_ptr<class VoxelWorld> voxelWorld;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<class VoxelWorld>
voxelWorld	src/Engine.cpp	/^std::unique_ptr<VoxelWorld> VoxelEngine::voxelWorld;$/;"	m	class:VoxelEngine	typeref:typename:std::unique_ptr<VoxelWorld>
voxel_base	include/VoxelWorld.hpp	/^#define voxel_base(/;"	d
voxel_mat	include/VoxelWorld.hpp	/^#define voxel_mat(/;"	d
width	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  uint32_t width, height;$/;"	m	struct:VkZero::GraphicsRenderpassImpl_T	typeref:typename:uint32_t
width	include/VkZero/Internal/image_internal.hpp	/^        uint32_t width, height, depth;$/;"	m	struct:VkZero::ImageImpl_T	typeref:typename:uint32_t
width	include/VkZero/Internal/raytracing_pipeline_internal.hpp	/^  uint32_t width;$/;"	m	struct:VkZero::RaytracingPipelineImpl_T	typeref:typename:uint32_t
window	include/VkZero/Internal/window_internal.hpp	/^  GLFWwindow *window;$/;"	m	struct:VkZero::WindowImpl_T	typeref:typename:GLFWwindow *
window	include/VkZero/frame.hpp	/^  WindowImpl_T *window;$/;"	m	struct:VkZero::frameImpl_T	typeref:typename:WindowImpl_T *
workers	include/VoxelWorld.hpp	/^  std::vector<std::thread> workers;$/;"	m	class:VoxelWorld	typeref:typename:std::vector<std::thread>
write	include/VkZero/image.hpp	/^        void write(VkCommandBuffer commandBuffer, char* data, uint32_t index)$/;"	f	class:VkZero::StagedImageBase	typeref:typename:void
write	include/VkZero/image.hpp	/^        void write(char* data, uint32_t index) $/;"	f	class:VkZero::StagedImageBase	typeref:typename:void
write	src/VkZero/binding.cpp	/^  void ResourceBindingImpl_T::write(VkDevice device, VkDescriptorSet &descriptorSet, int element/;"	f	class:ResourceBindingImpl_T	typeref:typename:void
writeAll	src/VkZero/binding.cpp	/^  void ResourceBindingImpl_T::writeAll(VkDevice device, std::vector<VkDescriptorSet> descriptorS/;"	f	class:ResourceBindingImpl_T	typeref:typename:void
writeDescriptor	include/VkZero/image.hpp	/^        void writeDescriptor(VkDevice device, VkDescriptorSet descriptorSet, uint32_t binding, u/;"	f	class:VkZero::ImageBase	typeref:typename:void
writeDescriptor	include/VkZero/image.hpp	/^        void writeDescriptor(VkDevice device, VkDescriptorSet descriptorSet, uint32_t binding, u/;"	f	class:VkZero::StagedImageBase	typeref:typename:void
yaw	include/Camera.hpp	/^  float yaw = -90.0f; \/\/ Rotation around the Y-axis (left\/right)$/;"	m	class:Camera	typeref:typename:float
~Camera	src/Camera.cpp	/^Camera::~Camera() {}$/;"	f	class:Camera
~CommandManager	src/CommandManager.cpp	/^CommandManager::~CommandManager() {}$/;"	f	class:CommandManager
~PipelineManager	src/PipelineManager.cpp	/^PipelineManager::~PipelineManager() {}$/;"	f	class:PipelineManager
~PushConstantDataImpl_T	include/VkZero/Internal/graphics_renderpass_internal.hpp	/^  ~PushConstantDataImpl_T() { delete data; }$/;"	f	struct:VkZero::PushConstantDataImpl_T
~Raytracer	src/Raytracer.cpp	/^Raytracer::~Raytracer() {}$/;"	f	class:Raytracer
~SyncManager	src/SyncManager.cpp	/^SyncManager::~SyncManager() {}$/;"	f	class:SyncManager
~VkZeroCoreImpl_T	src/VkZero/core.cpp	/^VkZeroCoreImpl_T::~VkZeroCoreImpl_T() {}$/;"	f	class:VkZeroCoreImpl_T
~VkZeroObjects	src/VkZeroObjects.cpp	/^VkZeroObjects::~VkZeroObjects() {}$/;"	f	class:VkZeroObjects
~VoxelWorld	src/VoxelWorld.cpp	/^VoxelWorld::~VoxelWorld() {}$/;"	f	class:VoxelWorld
~Window	src/VkZero/window.cpp	/^Window::~Window() {$/;"	f	class:Window
~WindowImpl_T	src/VkZero/window.cpp	/^WindowImpl_T::~WindowImpl_T()$/;"	f	class:WindowImpl_T
